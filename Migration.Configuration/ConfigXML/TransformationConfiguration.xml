<?xml version="1.0" encoding="utf-8" ?>
<TransformationConfig>
  <!-- Auth Components -->
  <Transformation Name="SITE">
    <Source>
      select st.SITE_NUMBER as Id,
      st.SITE_NUMBER as Number,
      st.SITE_short_NAME as Name,
      st.SITE_LONG_NAME as [Description],
      st.SITE_short_NAME as VenueCode,
      MST.SITE_CODE as Code, --ST.SITE_CODE as Code,
      --'Rot' as ParentCode,
      coalesce(PROP_PARENT_CODE,P.PROP_SHORT_NAME) as ParentCode,
      p.PROP_SHORT_NAME as ServiceProviderCode,
      --st.SITE_TIMEZONE_ID as Timezone,
      'AUS Eastern Standard Time' as Timezone,
      sttype.site_type_short_name as SiteType,
      ''  as LicensedMonitoringOperator,
      ''  as Licensee,
      0 as ApprovedMachineCount,
      CAST(0 as varchar(50)) as GamingLicenseNumber,
      --123456 as FaxNumber,
      --123456 as MobileNumber ,
      cast(1 as bit) as IsActive,
      cast(0 as bit) as IsDeleted,
      --2 as DepthLevel,
      coalesce(PROP_DEPTH_LEVEL, 2) as DepthLevel,
      '' as ContactInformation_Address,
      '' as ContactInformation_City,
      '' as ContactInformation_State,
      --'' as ContactInformation_Country,
      '' as ContactInformation_PostalCode,
      '' as ContactInformation_MailId,
      '' as ContactInformation_PhoneNumber,
      '' as ContactInformation_Fax,
      '' as ContactInformation_MobileNumber ,
      0 as DataRowVersion,
      0 as UMDataRowVersion,
      null as CreatedAt,
      null as UpdatedAt,
      substring(sy.SYS_SHORT_NAME,0,4) as Products_ProductCode,
      im.INS_SYSTEM_IP_ADDRESS as Products_Ip ,
      CAST(im.INS_SERVICE_PORT as VARCHAR(50)) as Products_Port
      from gam.SITE as st
      LEFT JOIN MIGRATION.GAM_SITE AS MST ON MST.SITE_LEGCY_ID = ST.SITE_ID
      join gam.SITE_TYPE as stType on st.SITE_TYPE_ID = stType.SITE_TYPE_ID
      join gam.INSTALLED_SYSTEM_MAP  as iMap on iMap.INSM_SITE_ID = st.site_id
      join gam.INSTALLED_SYSTEM as im on im.INS_SYS_ID = iMap.INSM_SYS_ID
      join gam.[SYSTEM] as sy on sy.SYS_ID = im.SYS_ID
      join gam.PROPERTY as p on p.PROP_ID = st.SITE_PROP_ID
      LEFT JOIN MIGRATION.GAM_PROPERTY AS MP ON MP.PROP_LEGCY_ID = P.PROP_ID
      where iMap.INSM_IS_SITE_GROUP = 0 and INS_SYSTEM_IP_ADDRESS NOT IN ('0.0.0.0')
      order by st.site_number
    </Source>
    <Destination>[Site].[Site]</Destination>
    <KeyFormat Format="151_{0}" Keys="Id"  />
  </Transformation>
  <Transformation Name="TASK">
    <Source>
      SELECT DISTINCT
      tc.FUNC_ID as 1,
      tc.FUNC_NAME 2,
      tc.FUNC_DESCRIPTION as 3,
      tp.MODL_ID as Module_Id,
      tp.MODL_NAME as Module_Name
      FROM [COMMON].[USER_FUNCTION] tc
      LEFT JOIN [COMMON].[MODULE] tp ON tc.MODULE_ID = tp.MODL_ID where FUNC_ID>0
    </Source>
    <Destination>[Employee].[Task]</Destination>
    <KeyFormat Format="53_{0}" Keys="Id"  />
    <ColumnMapping>
      <ColumnMap Key="1" ColumnName="Id"/>
      <ColumnMap Key="2" ColumnName="2"/>
      <ColumnMap Key="3" ColumnName="fv"/>
      <ColumnMap Key="4" ColumnName="fdv"/>
    </ColumnMapping>
  </Transformation>
  <Transformation Name="EMPLOYEE">
    <Source>
      select (ROW_NUMBER() over (ORDER BY Actr_Id) )+1 as  Id,
      ACTR_FIRST_NAME as FirstName,
      ACTR_MIDDLE_NAME as MiddleName,
      ACTR_LAST_NAME as LastName,
      --actr_active_dir_user as UserMatrixId,
	    cast(0 as varchar(50)) as UserMatrixId,
      ACTR_LOGIN as LoginName,
      --ACTR_USER_ID as SDSLogin,
	  cast(10000 as varchar(50)) as SDSLogin,
      ACTR_IS_DELETED  as IsActive,
      ACTR_AUTO_SIGN_OFF as IsAutoSigOffEnabled,
      ACTR_EMAIL_ID as Email,
      null as Access,
      null as LevelType,
      null as OrgLevel,
      0 as UMVersion from common.user_actor
	  WHERE ACTR_ID NOT IN( 1)
	  ORDER BY ACTR_ID
    </Source>
    <Destination>[Employee].[User]</Destination>
    <KeyFormat Format="52_{0}" Keys="Id"  />
  </Transformation>
  <Transformation Name="ROLE">
    <Source>
      SELECT
      CAST(mrRle.ROLE_NEW_ID as int) AS Id,
      ROLE_NAME AS Name,
      ROLE_CODE AS Code,
      ROLE_DESCRIPTION AS [Description],
      CAST(MG.FUNCGRP_NEW_ID as int) as TaskGroups_$
      FROM [COMMON].[USER_ROLE] as rl
      left join MIGRATION.COMMON_USER_ROLE as mrRle on mrRle.ROLE_ID = rl.ROLE_ID
      left join [COMMON].[USER_ROLE_FUNCTION_GROUP] as fnRlMap on fnRlMap.ROLE_ID = rl.ROLE_ID
      left join [COMMON].[USER_FUNCTION_GROUP] as fnGrp on fnGrp.funcgrp_id = fnRlMap.[FUNCGRP_ID]
      JOIN MIGRATION.COMMON_USER_FUNCTION_GROUP AS MG ON MG.FUNCGRP_ID = fnGrp.FUNCGRP_ID
      WHERE ROLE_IS_DELETED = 0 AND rl.ROLE_ID NOT IN (1)
      order by mrRle.ROLE_NEW_ID
    </Source>
    <Destination>[Employee].[Role]</Destination>
    <KeyFormat Format="50_{0}" Keys="Id"  />
  </Transformation>
  <Transformation Name="ORG">
    <Source>
      SELECT PROP_NEW_ID  as Id,
      MGP.PROP_SHORT_NAME as Code,
      --coalesce(PROP_PARENT_CODE,PROP_SHORT_NAME) as ParentCode,
      'Rot' as ParentCode,
      GP.PROP_SHORT_NAME as Name,
      PROP_LONG_NAME as [Description],
      CONVERT(bit,'false') as IsRoot,
      coalesce(PROP_DEPTH_LEVEL, 2) as DepthLevel,
      0 as UMDataRowVersion,
      0 as DataRowVersion
      FROM GAM.PROPERTY AS GP
      LEFT JOIN MIGRATION.GAM_PROPERTY AS MGP ON MGP.PROP_LEGCY_ID = GP.PROP_ID
      WHERE IS_DELETED = 0 and PROP_ID not in (1,550001000000000001)
    </Source>
    <Destination>Organization.Organization</Destination>
    <KeyFormat Format="100_{0}" Keys="Id"  />
  </Transformation>
  <Transformation Name="TSKGRP">
    <Source>
      SELECT
      MG.FUNCGRP_NEW_ID as Id,
      FUNCGRP_NAME as Code,
      FUNCGRP_NAME as Name,
      FUNCGRP_DESCRIPTION as [Description]
      FROM [COMMON].[USER_FUNCTION_GROUP] AS FG
      JOIN MIGRATION.COMMON_USER_FUNCTION_GROUP AS MG ON MG.FUNCGRP_ID = FG.FUNCGRP_ID
      WHERE FG.FUNCGRP_ID NOT IN (1)
      ORDER BY MG.FUNCGRP_NEW_ID
    </Source>
    <Destination>[Employee].[TaskGroup]</Destination>
    <KeyFormat Format="51_{0}" Keys="Id"  />
  </Transformation>
  
  <!-- Asset Components-->
 
  <Transformation Name="COMPDATA_MODEL_TYPE">
    <Source>
      ----------- MODEL TYPE----------
      SELECT 122003 as Id,
      22003 as cc_1,
      --COMPONENTS---
      0 as Component_Components_SiteId,
      'MODEL.TYPE' as cc_Code,
      --Component Values---
      '1_root' as cc_Components_ComponentValues_Id,
      'Model Type' as cc_Components_ComponentValues_Name,
      'Model Type' as cc_Components_ComponentValues_DisplayName,
      'MODEL.TYPE' as cc_Components_ComponentValues_Code,
      --ChildCompoenents----
      CAST(MDLTYPE_NEW_ID as VARCHAR(50))+'_1' as cc_Components_ComponentValues_ChildComponents_Id,
      Name as cc_Components_ComponentValues_ChildComponents_Name,
      DisplayName AS cc_Components_ComponentValues_ChildComponents_DisplayName,
      'MODEL.TYPE' AS cc_Components_ComponentValues_ChildComponents_Code,
      ----- OPTIONS ------
      ROW_NUMBER() OVER (PARTITION BY MDLTYP_ID ORDER BY MDLTYP_ID desc ) AS cc_Components_ComponentValues_ChildComponents_Options_Id,
      CASE  WHEN VALUE_DESC = 'MDLTYP_SHORT_NAME' then 'Model Type Short Name'
      WHEN VALUE_DESC = 'MDLTYP_LONG_NAME' then 'Model Type Long Name'
      END AS cc_Components_ComponentValues_ChildComponents_Options_Name,
      CASE  WHEN VALUE_DESC = 'MDLTYP_SHORT_NAME' then 'MODEL.TYPE.SHORT.NAME'
      WHEN VALUE_DESC = 'MDLTYP_LONG_NAME' then 'MODEL.TYPE.LONG.NAME'
      END AS cc_Components_ComponentValues_ChildComponents_Options_Code,
      VALUE as cc_Components_ComponentValues_ChildComponents_Options_Value
      FROM
      (SELECT MDLTYP_ID, MDLTYPE_NEW_ID,
      MDLTYP_SHORT_NAME as Name,
      MDLTYP_LONG_NAME as DisplayName,
      ROW_NUMBER() OVER (ORDER BY MDLTYP_ID ) AS Components_Id,
      CAST(MDLTYP_SHORT_NAME AS NVARCHAR) AS MDLTYP_SHORT_NAME,
      CAST(MDLTYP_LONG_NAME AS NVARCHAR) AS MDLTYP_LONG_NAME
      FROM GAM.MODEL_TYPE AS BASE_MT
      JOIN MIGRATION.GAM_MODEL_TYPE AS MG_MT ON BASE_MT.MDLTYP_ID = MG_MT.MDLTYPE_LEGCY_ID
      WHERE BASE_MT.IS_DELETED = 0 ) MDL_TYPE
      UNPIVOT
      ( VALUE FOR VALUE_DESC IN (MDLTYP_SHORT_NAME, MDLTYP_LONG_NAME)
      ) AS T
      -------- EOF MODEL TYPE ----------
    </Source>
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
    <ColumnMapping>
      <ColumnMap Key="1" ColumnName="Id"/>
      <ColumnMap Key="cc" ColumnName="Component"/>
      <!--<ColumnMap Key="3" ColumnName="fv"/>
      <ColumnMap Key="4" ColumnName="fdv"/>-->
    </ColumnMapping>
  </Transformation>
  <Transformation Name="COMPDATA_MODEL">
    <Source>
      ----------- MODEL ---------------
      Select 122006 as Id,
      22006 as Component_Id,
      'MODEL.RELATION' as Component_Code,
      --COMPONENTS---
      0 as Component_Components_SiteId,
      --Component Values---
      '1_root' as Component_Components_ComponentValues_Id,
      'Model' as Component_Components_ComponentValues_Name,
      'MODEL.RELATION' as Component_Components_ComponentValues_DisplayName,
      'MODEL.RELATION' as Component_Components_ComponentValues_Code,
      ---Manufacture ----
      --cast(ROW_NUMBER() OVER (Partition by MF.mf_id ORDER BY MF.mf_id ) as varchar(50))  + '_'+
      CAST ( (MF.MF_ID)  AS NVARCHAR) + '_'+
      MF.COMP_TYPE_ID as Component_Components_ComponentValues_CC_Id,
      MF.DISPLAY_NAME as Component_Components_ComponentValues_CC_Name,
      'MANUFACTURER' as Component_Components_ComponentValues_CC_Code,
      MF.value as Component_Components_ComponentValues_CC_DisplayName,
      ---Manufacture Type Options ----
      MF.MNF_CODE_SEQ as Component_Components_ComponentValues_CC_Options_Id,
      MF.MNF_NAME as Component_Components_ComponentValues_CC_Options_Name,
      mf.value as Component_Components_ComponentValues_CC_Options_Value,
      mf.MNF_CODE  as Component_Components_ComponentValues_CC_Options_Code,
      ---Model Type ----
      CAST ( MF.MF_ID  AS NVARCHAR) + '_'+
      MT.COMP_TYPE_ID as Component_Components_ComponentValues_CC_CC_Id,
      MT.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_Name,
      'MODEL.TYPE' as Component_Components_ComponentValues_CC_CC_Code,
      ---Model Type  Options ----
      mt.MDL_TYP_SEQ as Component_Components_ComponentValues_CC_CC_Options_Id,
      mt.VALUE as Component_Components_ComponentValues_CC_CC_Options_Value,
      mt.MDL_TYP_CODE as Component_Components_ComponentValues_CC_CC_Options_Code,
      mt.MDL_TYP_NAME as Component_Components_ComponentValues_CC_CC_Options_Name,
      ---Model Type ----
      CAST ( MF.MF_ID  AS NVARCHAR) + '_'+
      MD.COMP_TYPE_ID as Component_Components_ComponentValues_CC_CC_CC_Id,
      MD.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_CC_Name,
      'MODEL' as Component_Components_ComponentValues_CC_CC_CC_Code,
      ---Model Options ----
      md.MDL_SEQ as Component_Components_ComponentValues_CC_CC_CC_Options_Id,
      MD.VALUE as Component_Components_ComponentValues_CC_CC_CC_Options_Value,
      MD.MDL_CODE as Component_Components_ComponentValues_CC_CC_CC_Options_Code,
      MD.MDL_Name as Component_Components_ComponentValues_CC_CC_CC_Options_Name

      FROM [Migration].[VIEW_MODEL] AS MD
      join [Migration].[VIEW_MANUFACTURE] as mf on mf.manf_id = MD.MDL_MANF_ID and mf.mnf_seq = MD.MDL_SEQ
      JOIN [GAM].[MODEL_MODELTYPE_MAP] AS mdlMap ON mdlMap.MODL_ID = MD.MDL_ID
      join [Migration].[VIEW_MODEL_TYPE] as MT on MT.MDLTYP_ID = mdlMap.MTYP_ID and md.MDL_SEQ = MDL_TYP_SEQ
      --where md.MDL_ID in (1,2)
      order by mf.mf_id


      -------- EOF MODEL ----------
    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
    <ColumnMapping>
      <ColumnMap Key="CC" ColumnName="ChildComponents"/>
    </ColumnMapping>
  </Transformation>
  <Transformation Name="COMPDATA_THEME">
    <Source>
      SELECT
      '122061' as Id,
      '22061' as Component_Id,
      'THEME.RELATION' as Component_Code,
      '0'as Component_Components_SiteId,
      '1_root' as Component_Components_ComponentValues_Id,
      'Theme' as Component_Components_ComponentValues_Name,
      'Theme'  as Component_Components_ComponentValues_DisplayName,
      'THEME.RELATION' as Component_Components_ComponentValues_Code,
      
      ---- Theme Type -----
      CAST ( TM_ID  AS NVARCHAR) + '_'+
      TT.COMP_TYPE_ID as Component_Components_ComponentValues_CC_Id,
      TT.DISPLAY_NAME as Component_Components_ComponentValues_CC_Name,
      'THEME.TYPE' as Component_Components_ComponentValues_CC_Code,
      TT.value as Component_Components_ComponentValues_CC_DisplayName,

      ---Theme Type Options ----
      tt.THEM_TYPE_SEQ as Component_Components_ComponentValues_CC_Options_Id,
      tt.value as Component_Components_ComponentValues_CC_Options_Value,
      tt.them_type_name  as Component_Components_ComponentValues_CC_Options_Code,

      ---Theme Group ----
      --ROW_NUMBER() OVER (ORDER BY TG.DISPLAY_NAME) AS TG_RW_NM,
      CAST ( TM_ID  AS NVARCHAR) + '_'+
      TG.COMP_TYPE_ID as Component_Components_ComponentValues_CC_CC_Id,
      TG.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_Name,
      'THEME.GROUP' as Component_Components_ComponentValues_CC_CC_Code,
      ---Theme Options ----
      tg.THM_GRP_SEQ as Component_Components_ComponentValues_CC_CC_Options_Id,
      tg.VALUE as Component_Components_ComponentValues_CC_CC_Options_Value,
      tg.THM_GRP_CODE as Component_Components_ComponentValues_CC_CC_Options_Code,

      --- Theme Category ---
      --ROW_NUMBER() OVER (ORDER BY TC.TCAT_CODE) AS TC_RW_NM,
      CAST ( TM_ID  AS NVARCHAR) + '_'+
      tc.COMP_TYPE_ID as Component_Components_ComponentValues_CC_CC_CC_Id,
      TC.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_CC_Name,
      'THEME.CATEGORY' as Component_Components_ComponentValues_CC_CC_CC_Code,
      ---- Theme Category Options ----
      tc.TCAT_SEQ as Component_Components_ComponentValues_CC_CC_CC_Options_Id,
      tc.VALUE as Component_Components_ComponentValues_CC_CC_CC_Options_Value,
      tc.TCAT_CODE Component_Components_ComponentValues_CC_CC_CC_Options_Code,

      --- Manfacturer ----
      --ROW_NUMBER() OVER (PARTITION BY mf.DISPLAY_NAME ORDER BY mf.DISPLAY_NAME) AS MF_RW_NM,
      CAST ( TM_ID  AS NVARCHAR) + '_'+
      mf.COMP_TYPE_ID as Component_Components_ComponentValues_CC_CC_CC_CC_Id,
      MF.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_CC_CC_Name,
      'MANUFACTURER' as Component_Components_ComponentValues_CC_CC_CC_CC_Code,
      --- MAnufacturer Options
      MF.MNF_CODE_SEQ as  Component_Components_ComponentValues_CC_CC_CC_CC_Options_Id,
      mf.VALUE as  Component_Components_ComponentValues_CC_CC_CC_CC_Options_Value,
      mf.MNF_CODE as  Component_Components_ComponentValues_CC_CC_CC_CC_Options_Code,
      --- theme ---
      --ROW_NUMBER() OVER (ORDER BY TM.DISPLAY_NAME) AS TM_RW_NM,
      CAST ( TM_ID  AS NVARCHAR) + '_'+
      TM.COMP_TYPE_ID as  Component_Components_ComponentValues_CC_CC_CC_CC_CC_Id,
      TM.DISPLAY_NAME as  Component_Components_ComponentValues_CC_CC_CC_CC_CC_Name,
      'THEME' as  Component_Components_ComponentValues_CC_CC_CC_CC_CC_Code,
      --- Theme Options ------
      TM.THEM_CODE_SEQ as  Component_Components_ComponentValues_CC_CC_CC_CC_CC_Options_Id,
      TM.VALUE as  Component_Components_ComponentValues_CC_CC_CC_CC_CC_Options_Value,
      TM.THEM_CODE as Component_Components_ComponentValues_CC_CC_CC_CC_CC_Options_Code

      FROM [Migration].[VIEW_THEME] AS TM
      JOIN [Migration].[VIEW_MANUFACTURE] AS MF ON MF.MANF_ID = TM.MANF_ID AND MNF_SEQ = TM.THEM_SEQ
      JOIN [Migration].[VIEW_THEME_CATEGORY] AS TC ON TM.THEME_CAT_ID = TC.TCAT_ID AND TM.THEM_SEQ = TC.TCAT_SEQ
      JOIN [Migration].[VIEW_THEME_GROUP] AS TG ON TG.TGRP_ID = TC.TCAT_TGRP_ID AND TG.THM_GRP_SEQ = TC.TCAT_SEQ
      JOIN [Migration].[VIEW_THEME_TYPE] AS TT ON TT.TTYP_ID = TG.TGRP_TTYP_ID AND TT.THEM_TYPE_SEQ = TG.THM_GRP_SEQ
    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
    <ColumnMapping>
      <ColumnMap Key="CC" ColumnName="ChildComponents"/>
    </ColumnMapping>
  </Transformation>
  <Transformation Name="COMPDATA_DENOM">
    <Source>
      ----------- Denoms ---------------
      SELECT  122011 as Id,
      22011 as Component_Id,
      --COMPONENTS---
      0 as Component_Components_SiteId,
      'DENOMINATION' as Component_Code,
      --Component Values---
      '1_root' as Component_Components_ComponentValues_Id,
      'Denomination' as Component_Components_ComponentValues_Name,
      'DENOMINATION' as Component_Components_ComponentValues_DisplayName,
      'DENOMINATION' as Component_Components_ComponentValues_Code,
      --ChildCompoenents----
      CAST(Components_Id as VARCHAR(50))+'_1' as Component_Components_ComponentValues_ChildComponents_Id,
      DENM_AMOUNT as Component_Components_ComponentValues_ChildComponents_Name,
      DENM_AMOUNT AS Component_Components_ComponentValues_ChildComponents_DisplayName,
      'DENOMINATION' AS Component_Components_ComponentValues_ChildComponents_Code,
      ---- OPTIONS --------
      ROW_NUMBER() OVER (PARTITION BY DENM_ID ORDER BY DENM_ID ) AS Component_Components_ComponentValues_ChildComponents_Options_Id,
      CODE AS Component_Components_ComponentValues_ChildComponents_Options_Name,
      DENM_AMOUNT as Component_Components_ComponentValues_ChildComponents_Options_Value,
      'DENOM.AMOUNT' as Component_Components_ComponentValues_ChildComponents_Options_Code
      from ( SELECT DENM_ID,
      ROW_NUMBER() OVER (ORDER BY DENM_ID ) AS Components_Id,
      'Denom Value' as CODE,
      cast ( CONVERT(DECIMAL(10,2),cast(denm_amount as float)/100) as nvarchar) as DENM_AMOUNT
      from gam.denomination where IS_DELETED = 0 ) as den

      -------- EOF Denoms -----------
    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
  </Transformation>
  <Transformation Name="COMPDATA_MNF">
    <Source>
      SELECT 122002 as Id,
      22002 as Component_Id,
      'MANUFACTURER' as Component_Code,
      --COMPONENTS---
      0 as Component_Components_SiteId,
      --Component Values---
      '1_root' as Component_Components_ComponentValues_Id,
      'Manufacturer' as Component_Components_ComponentValues_Name,
      'Manufacturer' as Component_Components_ComponentValues_DisplayName,
      'Manufacturer' as Component_Components_ComponentValues_Code,
      --ChildCompoenents----
      CAST(Components_Id as VARCHAR(50)) +'_1' as Component_Components_ComponentValues_ChildComponents_Id,
      'MANUFACTURER' as  Component_Components_ComponentValues_ChildComponents_Code,
      Name as Component_Components_ComponentValues_ChildComponents_Name,
      DisplayName AS Component_Components_ComponentValues_ChildComponents_DisplayName,
      ----- OPTIONS ------
      cast( ROW_NUMBER() OVER (PARTITION BY MANF_ID ORDER BY MANF_ID ) as nvarchar) AS Component_Components_ComponentValues_ChildComponents_Options_Id,
      CASE  WHEN VALUE_DESC = 'MANF_SHORT_NAME' then 'Manufacture Short Name'
      WHEN VALUE_DESC = 'MANF_LONG_NAME' then 'Manufacture Long Name'
      WHEN VALUE_DESC = 'MANF_VEND_CODE' then 'Code'
      END AS Component_Components_ComponentValues_ChildComponents_Options_Name,

      CASE  WHEN VALUE_DESC = 'MANF_SHORT_NAME' then 'MANF.SHORT.NAME'
      WHEN VALUE_DESC = 'MANF_LONG_NAME' then 'MANF.LONG.NAME'
      WHEN VALUE_DESC = 'MANF_VEND_CODE' then 'MANUF.CODE'
      END AS Component_Components_ComponentValues_ChildComponents_Options_Code,

      VALUE as Component_Components_ComponentValues_ChildComponents_Options_Value
      FROM
      (SELECT MANF_ID, MANF_SHORT_NAME as Name, MANF_LONG_NAME as DisplayName,
      ROW_NUMBER() OVER (ORDER BY MF_NEW_ID ) AS Components_Id,
      CAST(MANF_SHORT_NAME AS NVARCHAR) AS MANF_SHORT_NAME,
      CAST(MANF_LONG_NAME AS NVARCHAR) AS MANF_LONG_NAME,
      CAST(MANF_VEND_CODE AS NVARCHAR) AS MANF_VEND_CODE
      FROM GAM.MANUFACTURER
      JOIN MIGRATION.GAM_MANUFACTURER ON MNF_LEGCY_ID = MANF_ID
      WHERE IS_DELETED = 0 AND MANF_IS_VENDOR = 0) MFN
      UNPIVOT
      ( VALUE FOR VALUE_DESC IN (MANF_SHORT_NAME, MANF_LONG_NAME, MANF_VEND_CODE)
      ) AS T
      ------ EOF Manufacturer ------

    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
  </Transformation>
  <Transformation Name="COMPDATA_POS_VENDOR">
    <Source>
      SELECT 22051 as Id,
      22051 as Component_Id,
      'POS.VENDOR' as Component_Code,
      --------COMPONENTS---------
      0 as Component_Components_SiteId,
      -------Component Values--------
      '1_root' as Component_Components_ComponentValues_Id,
      'POS Vendor' as Component_Components_ComponentValues_Name,
      'POS Vendor' as Component_Components_ComponentValues_DisplayName,
      'POS.VENDOR' as Component_Components_ComponentValues_Code,
      ------ChildCompoenents-------
      CAST(Components_Id as VARCHAR(50)) +'_1' as Component_Components_ComponentValues_ChildComponents_Id,
      'POS.VENDOR' as  Component_Components_ComponentValues_ChildComponents_Code,
      Name as Component_Components_ComponentValues_ChildComponents_Name,
      DisplayName AS Component_Components_ComponentValues_ChildComponents_DisplayName,
      ----- OPTIONS ----------
      cast( ROW_NUMBER() OVER (PARTITION BY MANF_ID ORDER BY MANF_ID ) as nvarchar) AS Component_Components_ComponentValues_ChildComponents_Options_Id,
      CASE  WHEN VALUE_DESC = 'MANF_SHORT_NAME' then 'Vendor Short Name'
      WHEN VALUE_DESC = 'MANF_LONG_NAME' then 'Vendor Long Name'
      WHEN VALUE_DESC = 'MANF_VEND_CODE' then 'Code'
      END AS Component_Components_ComponentValues_ChildComponents_Options_Name,

      CASE  WHEN VALUE_DESC = 'MANF_SHORT_NAME' then 'VEND.SHORT.NAME'
      WHEN VALUE_DESC = 'MANF_LONG_NAME' then 'VEND.LONG.NAME'
      WHEN VALUE_DESC = 'MANF_VEND_CODE' then 'VEND.CODE'
      END AS Component_Components_ComponentValues_ChildComponents_Options_Code,

      VALUE as Component_Components_ComponentValues_ChildComponents_Options_Value
      FROM
      (SELECT MANF_ID, MANF_SHORT_NAME as Name, MANF_LONG_NAME as DisplayName,
      ROW_NUMBER() OVER (ORDER BY MF_NEW_ID ) AS Components_Id,
      CAST(MANF_SHORT_NAME AS NVARCHAR) AS MANF_SHORT_NAME,
      CAST(MANF_LONG_NAME AS NVARCHAR) AS MANF_LONG_NAME,
      CAST(MANF_VEND_CODE AS NVARCHAR) AS MANF_VEND_CODE
      FROM GAM.MANUFACTURER
      JOIN MIGRATION.GAM_POS_MANUFACTURER ON MNF_LEGCY_ID = MANF_ID
      WHERE IS_DELETED = 0) MFN
      UNPIVOT
      ( VALUE FOR VALUE_DESC IN (MANF_SHORT_NAME, MANF_LONG_NAME, MANF_VEND_CODE)
      ) AS T
    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
  </Transformation>
  <Transformation Name="COMPDATA_POS_MODEL">
    <Source>
      SELECT '22052' as Id,
     'POS.MODEL' as Code,
      -------Components--------
      0 as Components_SiteId,
      ------ComponentValues------
      '1_root' as Components_ComponentValues_Id,
      'POS Model' as Components_ComponentValues_Name,
      'POS.MODEL' as Components_ComponentValues_Code,
      'POS Model' as Components_ComponentValues_DisplayName,
      -------ChildComponents-------
      cast(Components_Id as nvarchar)+'_1' as Components_ComponentValues_ChildComponents_Id,
      Name as Components_ComponentValues_ChildComponents_Name,
      'POS.MODEL' as Components_ComponentValues_ChildComponents_Code,
      DISPLAY_NAME as Components_ComponentValues_ChildComponents_DisplayName,
      -------Options---------
      '1' as Components_ComponentValues_ChildComponents_Options_Id,
      'POS.MODEL.NAME' as Components_ComponentValues_ChildComponents_Options_Code,
      MODL_LONG_NAME as Components_ComponentValues_ChildComponents_Options_Value
      FROM (SELECT MDL.MDL_ID, MDL_MANF_ID, 
      MDL_NEW_ID,
      MDL_SHORT_NAME as Name,
      MDL_LONG_NAME as DISPLAY_NAME,
      MDL_NEW_ID AS Components_Id,
      CAST(MDL.MDL_LONG_NAME AS NVARCHAR)  AS MODL_LONG_NAME
      FROM  GAM.MODEL AS MDL 
      JOIN MIGRATION.GAM_POS_MODEL AS GD ON GD.MDL_LEGCY_ID = MDL.MDL_ID
      WHERE MDL.IS_DELETED = 0 ) MDL_TYPE
    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
  </Transformation>
  <Transformation Name="COMPDATA_AZB">
    <Source>
--
SELECT 
---- Component ----
'22010' as Component_Id,
'AZB' as Component_Code,
---- Components----
SITE_NUMBER as Component_Components_SiteId,

---- ComponentValues ----
--SITE_NUMBER as Component_Components_SiteId,
---- ComponentValues ----
'1_root' as Component_Components_ComponentValues_Id,
'Area Zone Bank' as Component_Components_ComponentValues_Name,
'Area Zone Bank' as Component_Components_ComponentValues_DisplayName,
'AZB' as Component_Components_ComponentValues_Code,
--- Area ChildComponents ---
'1_22007' as Component_Components_ComponentValues_CC_Id,
AR.DISPLAY_NAME as Component_Components_ComponentValues_CC_Name,
AR.DISPLAY_NAME as Component_Components_ComponentValues_CC_DisplayName,
'AREA' as Component_Components_ComponentValues_CC_Code,

--- Area Options---
AREA_SEQ as Component_Components_ComponentValues_CC_Options_Id,
AREA_NAME as Component_Components_ComponentValues_CC_Options_Name,
AREA_CODE as Component_Components_ComponentValues_CC_Options_Code,
VALUE_AR as Component_Components_ComponentValues_CC_Options_Value,

--- Zone ChildComponents ---
'1_22008' as Component_Components_ComponentValues_CC_CC_Id,
ZN.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_Name,
ZN.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_DisplayName,
'ZONE' as Component_Components_ComponentValues_CC_CC_Code,

--- Zone Options---
ZONE_SEQ as Component_Components_ComponentValues_CC_CC_Options_Id,
ZONE_NAME as Component_Components_ComponentValues_CC_CC_Options_Name,
ZONE_CODE as Component_Components_ComponentValues_CC_CC_Options_Code,
VALUE_ZN as Component_Components_ComponentValues_CC_CC_Options_Value,

--- Bank ChildComponents ---
'1_22007' as Component_Components_ComponentValues_CC_CC_CC_Id,
BK.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_CC_Name,
BK.DISPLAY_NAME as Component_Components_ComponentValues_CC_CC_CC_DisplayName,
'BANK' as Component_Components_ComponentValues_CC_CC_CC_Code,

--- Bank Options---
BANK_SEQ as Component_Components_ComponentValues_CC_CC_CC_Options_Id,
BANK_NAME as Component_Components_ComponentValues_CC_CC_CC_Options_Name,
BANK_CODE as Component_Components_ComponentValues_CC_CC_CC_Options_Code,
VALUE_BK as Component_Components_ComponentValues_CC_CC_CC_Options_Value

--SELECT
FROM MIGRATION.VIEW_AREA AS AR
JOIN MIGRATION.VIEW_ZONE AS ZN ON ZN_AREA_ID = AREA_ID AND AREA_SEQ = ZONE_SEQ
JOIN MIGRATION.VIEW_BANK AS BK ON BK_ZONE_ID = ZONE_ID AND ZONE_SEQ = BANK_SEQ
JOIN GAM.[SITE] ON SITE_ID = AR_SITE_ID

    </Source>   
    <Destination>[COMPONENTS].[ComponentData]</Destination>
    <KeyFormat Format="57_{0}" Keys="Id" />
    <ColumnMapping>
      <ColumnMap Key="CC" ColumnName="ChildComponents"/>
    </ColumnMapping>
  </Transformation>
  <Transformation Name="AST_DEFN">
    <Source>
      SELECT AST.ASST_ID as Id,
      CONVERT(varchar(100),ASTDFN_OPTN_ORDER) as Sequences,
      CONVERT(bit,'true') as IsSystemDefined,
      --------Asset Type -----
      AST.ASST_ID as AssetType_Id,
      AST.ASST_NAME as AssetType_Name,
      Ast.ASST_DESCRIPTION as AssetType_Description,
      CONVERT(bit,'true') as AssetType_IsRevenueAffecting,
      CONVERT(bit,'false') as AssetType_IsInline,
      'Root' as AssetType_Scope,
      --------Options--------
      optn.OPTN_ID as Options_Id,
      optn.OPTN_NAME as Options_Name,
      optn.OPTN_CODE as Options_Code,
      optn.OPTN_DESCRIPTION as Options_Description,
      optn.OPTN_DEFAULT_VAL as Options_DefaultValue,
      optn.OPTN_MIN_VALUE as Options_MinLength,
      optn.OPTN_MAX_VALUE as Options_MaxLength,
      optn.OPTN_EDIT_ENABLED as Options_IsEditEnabled,
      optn.OPTN_ADD_ENABLED as Options_IsAddEnabled,
      optn.OPTN_MOVE_ENABLED as Options_IsMoveEnabled,
      optn.OPTN_MOVE_EDIT_ENABLED as Options_IsMoveEditEnabled,
      optn.OPTN_DELETE_ENABLED as Options_IsDeleteEnabled,
      --optn.OPTN_DELETE_ENABLED as Options_IsDeleteEnabled,
      CONVERT(bit,'true') as Options_IsSearchable
      FROM GAM.ASSET AS AST
      LEFT JOIN GAM.ASSET_DEFINITION AS AST_DFN ON AST.ASST_ID = AST_DFN.ASTDFN_ASST_ID
      LEFT JOIN GAM.[OPTION] AS OPTN ON OPTN.OPTN_ID = AST_DFN.ASTDFN_OPTN_ID
      --LEFT JOIN GAM.OPTION_ENUMERATION AS ENUM ON OPTN.OPTN_ID=ENUM.OPTEN_OPTN_ID
      --WHERE AST.ASST_ID = 1
    </Source>
    <Destination>ASSET_DEF.ASSETS</Destination>
    <KeyFormat Format="53_{0}" Keys="Id"  />
  </Transformation>
  <Transformation Name="AST">
    <Source>
      SELECT MG.ASD_STD_NEW_ID as  Id,
      ---ASSET ID -----
      MG.ASD_STD_NEW_ID as AssetId_Id,
      CASE WHEN AST.ASST_ID = 1 THEN 10
      WHEN AST.ASST_ID = 2 THEN 3
      WHEN AST.ASST_ID = 3 THEN 4
      WHEN AST.ASST_ID = 4 THEN 8
      WHEN AST.ASST_ID = 5 THEN 7
      WHEN AST.ASST_ID = 6 THEN 9
      --WHEN AST.ASST_ID = 7 THEN
      WHEN AST.ASST_ID = 8 THEN 2
      WHEN AST.ASST_ID = 9 THEN 13
      WHEN AST.ASST_ID = 10 THEN 14
      WHEN AST.ASST_ID = 11 THEN 12
      WHEN AST.ASST_ID = 12 THEN 6
      WHEN AST.ASST_ID = 13 THEN 5
      WHEN AST.ASST_ID = 14 THEN 1
      END as AssetId_AssetTypeDefinitionId,
      ----SITE----------
      SITE_NUMBER as Site_SiteId,
      SITE_LONG_NAME as Site_SiteName,
      SITE_NUMBER as Site_SiteNumber,
      st.IS_DELETED as Site_IsDeleted,
      0 as Site_OrganizationId, -- mapping needed
      pt.prop_long_name as Site_OrganizationName,
      ---- OPTIONS ----------
      case when ogrp_id = 1 then OPTN.OPTN_ID else null end as Options_Id,
      case when ogrp_id = 1 then OPTN.OPTN_CODE else null end as Options_Code,
      case when ogrp_id = 1 then AST_OPTN_VALUE else null end as Options_Value,
      -----Components --------
      case when ogrp_id > 1 then OPTN.OPTN_ID else null end as Components_ComponentId,
      case when ogrp_id > 1 then CAST(OPTN.OPTN_ID as varchar(50)) else null end as Components_ComponentInstanceId,
      case when ogrp_id > 1 then OPTN.OPTN_NAME else null end as Components_ComponentName,
      case when ogrp_id > 1 then OPTN.OPTN_NAME else null end as Components_ComponentKey,
      case when ogrp_id > 1 then
      ( case ogrp_id
      when 90023 then  mdl.mdl_long_name
      when 90011 then  ar.ar_long_name
      when 90012 then  zn.zn_long_name
      when 90013 then  bk.bk_long_name/*Bank*/
      when 90041 then  cast(contract_no as nvarchar)/*Contract*/
      when 90051 then  cast(mdt_number as nvarchar)/*Meter Delta*/
      when 90021 then  MANF_LONG_NAME
      when 90014 then  COL_LONG_NAME
      when 90023 then  MDLTYP_LONG_NAME end)  else null end as Components_ComponentValue,
      case when ogrp_id > 1 then OPTN.OPTN_CODE else null end as Components_ComponentCode,
      ----- Inline assets ------ Need to discuss

      ------Type Code -----
      0 as TypeCode_TypeCodeId, -- mapping needed
      TCODE.TYCOD_NAME as TypeCode_TypeCodeName
      FROM GAM.ASSET_STANDARD_DETAILS AS ASD
      JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS MG on MG.ASD_STD_LEGACY_ID=ASD.ASD_STD_ID
      JOIN GAM.ASSET AS AST ON AST.ASST_ID = ASD.ASD_ASST_ID
      JOIN GAM.INSTALLED_SYSTEM_MAP AS MAP ON MAP.INSM_ID = ASD.ASD_INSMAP_ID
      JOIN GAM.[SITE] AS ST ON ST.SITE_ID = MAP.INSM_SITE_ID
      JOIN GAM.PROPERTY AS pt ON pt.PROP_ID = ST.SITE_PROP_ID
      JOIN GAM.ASSET_DETAIL AS AD ON AD.ASD_STD_ID = ASD.ASD_STD_ID
      JOIN GAM.[OPTION] AS OPTN ON OPTN.OPTN_ID = AD.AST_OPTION_ID
      LEFT JOIN GAM.MANUFACTURER  AS MNF ON MNF.MANF_ID = ASD.ASD_MANF_ID
      LEFT JOIN GAM.MODEL AS MDL ON MDL.MDL_ID = ASD.ASD_MODL_ID
      LEFT JOIN GAM.MODEL_MODELTYPE_MAP AS MDL_TYPE_MAP ON MDL_TYPE_MAP.[MODEL_MAP_ID] = ASD.ASD_MODL_TYP_MAPiD
      LEFT JOIN GAM.AREA AS AR ON AR.AREA_ID = ASD.ASD_AREA_ID
      LEFT JOIN GAM.ZONE AS ZN ON ZN.ZONE_ID = ASD.ASD_ZONE_ID
      LEFT JOIN GAM.BANK AS BK ON BK.BANK_ID = ASD.ASD_BANK_ID
      LEFT JOIN GAM.METER_DELTA AS MTR_DELTA ON MTR_DELTA.MDT_ID = ASD.ASD_MTR_DLTA_ID
      LEFT JOIN [GAM].[TYPE_CODE_MASTER] AS TCODE ON TCODE.TYCOD_ID = ASD.ASD_TCOD_ID
      LEFT JOIN [GAM].[CONTRACT_DETAILS] AS CNTRCT ON CNTRCT.CONTRACT_ID = ASD.ASD_CNTR_ID
      LEFT JOIN [GAM].[COLLECTION] AS COL ON COL.[COLLECTION_ID] = ASD.ASD_COLLECTION_ID
      LEFT JOIN [GAM].MODEL_TYPE AS MTYP ON COL.[COLLECTION_ID] = ASD.ASD_COLLECTION_ID
      WHERE ASD.IS_DELETED = 0 AND ASD_CLST_STAT_ID = 5
      AND AST.ASST_ID not in( 1,14,7)
      AND SITE_NUMBER in ({0})
    </Source>
    <Destination>[DataManagement].[Asset]</Destination>
    <KeyFormat Format="59_{0}_{1}" Keys="AssetId.AssetTypeDefinitionId,Id"  />
  </Transformation>
  <Transformation Name="PROGRESSIVE">
    <Source>
      select mtr.POOL_NEW_ID  as Id,
      ---ASSET ID -----
      --1 as AssetId_Id,
      mtr.POOL_NEW_ID  as AssetId_Id,
      11 as AssetId_AssetTypeDefinitionId,
      ----SITE----------
      Site_SiteId,
      Site_SiteName,
      Site_SiteNumber,
      Site_IsDeleted,
      Site_OrganizationId, -- mapping needed
      Site_OrganizationName,
      -----
      Options_Id,
      Options_Name,
      Options_Code,
      Options_Value,

      -----InlineAssets----
      0 as InlineAssets_Id,
      213 as InlineAssets_AssetId_AssetTypeDefinitionId,
      0 as InlineAssets_AssetId_Id,
      -----Options------
      InlineAssets_Id as InlineAssets_Options_Id,
      InlineAssets_Name as InlineAssets_Options_Name,
      InlineAssets_Code as InlineAssets_Options_Code,
      InlineAssets as InlineAssets_Options_Value
      --select *
      from MIGRATION.VIEW_PROGRESSIVE_METERS as mtr
      left join MIGRATION.VIEW_POOL AS P on p.prgp_id = mtr.PRGP_ID and mtr.InlineAssets_Id = Options_Id
      order by mtr.PRGP_ID, mtr.InlineAssets_Id
    </Source>
    <Destination>[DataManagement].[Asset]</Destination>
    <KeyFormat Format="59_{0}_{1}" Keys="AssetId.AssetTypeDefinitionId,Id"  />
  </Transformation>
  <Transformation Name="TYPCODE">
    <Source>
      SELECT TYCOD_Number as Id,
      TYCOD_NAME as Name,
      TYCOD_DESC as [Desc],
      CAST(0 as VARCHAR(50)) as SelectedInlines,
      case when TYCOD_NAME like 'POS%' then 305 else 11 end as AssetTypeId,
      case when TYCOD_NAME like 'POS%' then 'POS' else 'Slot' end as Asset_Type,
      --------TypeCodeOption------
      ---------Options------------
      [OPTION_ID] as TypeCodeOption_Options_OptionId,
      val.[TYCV_OPTN_VALUE] as TypeCodeOption_Options_Value
      ---------ComponentOptions---------


      ----------InlineOptions-----------
      from GAM.TYPE_CODE_MASTER as ms
      join GAM.TYPE_CODE_VALUES as val on val.[TYCV_TYCOD_ID] = ms.TYCOD_ID
      join gam.[OPTION] as optn on optn.optn_id  = tycv_optn_id
      left join [MIGRATION].[ASSET_TYPE_DEFN] as tOptn on tOptn.[OPTION_CODE] = optn.[OPTN_CODE]
      where ms.[TYCOD_TYPE] = 2
      order by  ms.[TYCOD_ID]
    </Source>
    <Destination>[DataManagement].[TypeCode]</Destination>
    <KeyFormat Format="56_{0}" Keys="Id"  />
  </Transformation>
  <Transformation Name="AST_SLOT">
    <Source>
      SELECT gSltMap.ASD_STD_NEW_ID as  Id,
      ---ASSET ID -----
      gSltMap.ASD_STD_NEW_ID as AssetId_Id,
       10 as AssetId_AssetTypeDefinitionId,
      ---------SITE----------
      isnull(Site_SiteId, SITE_NEW_ID) as Site_SiteId,
      isnull(Site_SiteName, SITE_LONG_NAME) as Site_SiteName,
      isnull(Site_SiteNumber, SITE_NUMBER) as Site_SiteNumber,
      --st.IS_DELETED as Site_IsDeleted,
      isnull(OrganizationId, Ast_Optn.PROP_NEW_ID) as Site_OrganizationId,
      isnull(OrganizationName, Ast_Optn.PROP_LONG_NAME) as Site_OrganizationName,
      --------- OPTIONS ----------
      Ast_Optn.[OPTION_ID] as Options_Id,
      Ast_Optn.OPTION_CODE as Options_Code,
      Ast_Optn.AST_OPTN_VALUE as Options_Value,
      --------Components --------
      ComponentId as Components_ComponentId,
      ComponentInstanceId as Components_ComponentInstanceId,
      ComponentName as Components_ComponentName,
      ComponentKey as Components_ComponentKey,
      ComponentValue as Components_ComponentValue,
      ComponentCode as Components_ComponentCode,
         --ASST_OPTN_ORDER,  
         --Seq_Id ,
      ------------InlineAssets------------
        --gSltMap.game_id,
      InlineAssets_Id,
      AssetId_AssetTypeDefinitionId as InlineAssets_AssetId_AssetTypeDefinitionId,
      AssetId_Id as InlineAssets_AssetId_Id,
      InlineAssets_Components_ComponentId,
      InlineAssets_Components_ComponentName,
      InlineAssets_Components_ComponentValue,
      InlineAssets_Components_ComponentKey,
      InlineAssets_Components_ComponentInstanceId,
      InlineAssets_Components_ComponentCode,
      gSltMap.IdIndex as InlineAssets_Options_Id,
      gSltMap.Options_Value as InlineAssets_Options_Value,
      gSltMap.Options_Code as InlineAssets_Options_Code,
      --------TypeCode--------
      isnull(TypeCodeNumber, TypeCode_Id) as TypeCode_TypeCodeId,
      isnull(TypeCodeName, TypeCode_Name) as TypeCode_TypeCodeName
      FROM (SELECT ASD.ASD_STD_ID,ASD_STD_NEW_ID, [AST_OPTION_ID], [OPTION_ID],[OPTN_NAME],
      fastDefn.[OPTION_NAME], [OPTION_CODE], [ASTDFN_OPTN_ORDER],
      CASE WHEN AD.AST_OPTN_VALUE = 'FLAG.NO' then 'No' when AD.AST_OPTN_VALUE = 'FLAG.YES' then 'Yes' 
      else AD.AST_OPTN_VALUE end as AST_OPTN_VALUE, 
       GST.SITE_NEW_ID, st.SITE_NUMBER, st.SITE_LONG_NAME,
      gpt.PROP_NEW_ID, pt.PROP_LONG_NAME, ASST_OPTN_ORDER,
      tycod_number as TypeCode_Id, tycod_name as TypeCode_Name
      FROM GAM.ASSET_STANDARD_DETAILS AS ASD
      JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS AS GSD ON ASD.ASD_STD_ID = GSD.ASD_STD_LEGACY_ID
      JOIN GAM.ASSET AS AST ON AST.ASST_ID = ASD.ASD_ASST_ID
      JOIN GAM.INSTALLED_SYSTEM_MAP AS MAP ON MAP.INSM_ID = ASD.ASD_INSMAP_ID
      JOIN GAM.[SITE] AS ST ON ST.SITE_ID = MAP.INSM_SITE_ID
      JOIN MIGRATION.GAM_SITE AS GST ON GST.[SITE_LEGCY_ID] = ST.SITE_ID
      JOIN GAM.PROPERTY AS pt ON pt.PROP_ID = ST.SITE_PROP_ID
      JOIN [MIGRATION].[GAM_PROPERTY] as gpt on gpt.[PROP_LEGCY_ID] = pt.PROP_ID
      JOIN GAM.ASSET_DETAIL AS AD ON  AD.IS_DELETED = 0 and AD.ASD_STD_ID = ASD.ASD_STD_ID
      left join gam.[OPTION] as optn on optn.[OPTN_ID] = AST_OPTION_ID
      left join gam.ASSET_DEFINITION as astDfn on astdfn.ASTDFN_ASST_ID = AST.ASST_ID 
      and optn.[OPTN_ID] = astDfn.[ASTDFN_OPTN_ID]
      left join [MIGRATION].[ASSET_TYPE_DEFN] as fastDefn on 
      fastDefn.[ASSET_NAME] = AST.asst_name and fastDefn.[OPTION_CODE] = optn.OPTN_CODE
      left join [GAM].[TYPE_CODE_MASTER] as tcm on tcm.tycod_id = [ASD_TCOD_ID]
      WHERE ASD.IS_DELETED = 0 AND ASD_CLST_STAT_ID = 5 AND ASD.ASD_ASST_ID = 1 
      and [OPTION_ID] is not null and st.SITE_NUMBER in ({0})
      ) as Ast_Optn
      FULL JOIN MIGRATION.GAM_ASSET_COMP_VALUES AS AST_COMP ON AST_OPTN.ASD_STD_ID = AM_LEGACYID and Ast_Optn.ASST_OPTN_ORDER = AST_COMP.Seq_id
      FULL JOIN MIGRATION.GAM_GAMES_DETAILS as gSltMap  on [GDM_ASTSTD_OR_TYCD_ID] = Ast_Optn.ASD_STD_ID
      and Ast_Optn.ASST_OPTN_ORDER = gSltMap.Ast_Gme_Seq
      --where 1=1
      --and gSltMap.ASD_STD_NEW_ID = 8482
      order by Ast_Optn.asd_std_id, game_id --=209907247000000408
    </Source>
    <Destination>[DataManagement].[Asset]</Destination>
    <KeyFormat Format="59_{0}_{1}" Keys="AssetId.AssetTypeDefinitionId,Id"  />
  </Transformation>
  <Transformation Name="LINK_SLOT2POOL">
    <Source>
    SELECT 
    --'59_10_'+cast(MSLOT.[ASD_STD_NEW_ID] as nvarchar) as [Key],
    ------Id---------
    10 as Id_AssetTypeDefinitionId,
    MSLOT.[ASD_STD_NEW_ID] as Id_Id,
    -------ActiveAssetLink-------
    11 as ActiveAssetLink_AssetTypeDefinitionId,
    MPOOL.[POOL_NEW_ID] as ActiveAssetLink_Id
    --row_number() over (partition by [ASD_STD_NEW_ID] order by [ASD_STD_NEW_ID]) as rNumber
    FROM [PROGRESSIVE].[SLOT_POOL_MAPPING] AS PM 
    JOIN [PROGRESSIVE].[SLOT] AS SLT ON SLT.SLOT_ID = PM.SLOT_ID
    JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS AS MSLOT ON MSLOT.ASD_STD_LEGACY_ID = SLT.ASD_STD_ID
    JOIN GAM.ASSET_STANDARD_DETAILS AS ONLNE ON ONLNE.ASD_STD_ID = MSLOT.ASD_STD_LEGACY_ID
    JOIN GAM.ASSET AS AST ON AST.ASST_ID = ONLNE.ASD_ASST_ID
    JOIN MIGRATION.PROGRESSIVE_POOL AS MPOOL ON MPOOL.[POOL_LEGCY_ID] = PRGP_ID
    WHERE PM.[IS_DELETED] = 0 AND ISNULL(ASST_ANCESTOR_ID, ASST_ID)=1
    ORDER BY MSLOT.[ASD_STD_NEW_ID], [POOL_NEW_ID]
    </Source>
    <Destination>[DataManagement].[AssetLink]</Destination>
    <KeyFormat Format="59_10_{0}" Keys="Id.Id"  />
  </Transformation>
  <Transformation Name="LINK_POOL2SLOT">
    <Source>
    SELECT 
    --'59_11_'+cast(PoolId as nvarchar) as [Key],
    ----Id--
    11 as Id_AssetTypeDefinitionId,
    PoolId as Id_Id,
    --ActiveAssetLink--
    AssetTypeId as ActiveAssetLink_AssetTypeDefinitionId,
    AssetId as ActiveAssetLink_Id
    FROM ( 
    /* pool to slot */
    SELECT MPOOL.[POOL_NEW_ID] as PoolId,
    MSLOT.[ASD_STD_NEW_ID] as AssetId,
    --row_number() over (partition by [POOL_NEW_ID] order by [POOL_NEW_ID]) as rNumber,
    10 as AssetTypeId
    FROM [PROGRESSIVE].[SLOT_POOL_MAPPING] AS PM 
    JOIN [PROGRESSIVE].[SLOT] AS SLT ON SLT.SLOT_ID = PM.SLOT_ID
    JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS AS MSLOT ON MSLOT.ASD_STD_LEGACY_ID = SLT.ASD_STD_ID
    JOIN GAM.ASSET_STANDARD_DETAILS AS ONLNE ON ONLNE.ASD_STD_ID = MSLOT.ASD_STD_LEGACY_ID
    JOIN GAM.ASSET AS AST ON AST.ASST_ID = ONLNE.ASD_ASST_ID
    JOIN MIGRATION.PROGRESSIVE_POOL AS MPOOL ON MPOOL.[POOL_LEGCY_ID] = PRGP_ID
    WHERE PM.[IS_DELETED] = 0 AND ISNULL(ASST_ANCESTOR_ID, ASST_ID)=1
    UNION ALL
    /*pool to controller*/
    SELECT MPOOL.[POOL_NEW_ID] as PoolId,
    MSLOT.[ASD_STD_NEW_ID] as AssetId,
    --row_number() over (partition by [POOL_NEW_ID] order by [POOL_NEW_ID]) as rNumber,
    15 as AssetTypeId
    FROM [PROGRESSIVE].[pool] as p
    JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS AS MSLOT ON MSLOT.ASD_STD_LEGACY_ID = p.PCON_ID
    JOIN GAM.ASSET_STANDARD_DETAILS AS ONLNE ON ONLNE.ASD_STD_ID = MSLOT.ASD_STD_LEGACY_ID
    JOIN GAM.ASSET AS AST ON AST.ASST_ID = ONLNE.ASD_ASST_ID
    JOIN MIGRATION.PROGRESSIVE_POOL AS MPOOL ON MPOOL.[POOL_LEGCY_ID] = PRGP_ID
    WHERE p.[IS_DELETED] = 0  ) as vrAll
    ORDER BY PoolId
    </Source>
    <Destination>[DataManagement].[AssetLink]</Destination>
    <KeyFormat Format="59_11_{0}" Keys="Id.Id"  />
  </Transformation>
  <Transformation Name="LINK_CNTRL2POOL">
    <Source>
    --Controller[15] to Pool[11]
    SELECT 
    --'59_15_'+cast([ASD_STD_NEW_ID] as nvarchar) as [Key],
    --Id--
    15 as Id_AssetTypeDefinitionId,
    [ASD_STD_NEW_ID] as Id_Id,
    --ActiveAssetLink--
    11 as ActiveAssetLink_AssetTypeDefinitionId,
    [POOL_NEW_ID] as ActiveAssetLink_Id
    --row_number() over (partition by [POOL_NEW_ID] order by [POOL_NEW_ID]) as rNumber
    FROM [PROGRESSIVE].[pool] as p
    JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS AS MSLOT ON MSLOT.ASD_STD_LEGACY_ID = p.PCON_ID
    JOIN GAM.ASSET_STANDARD_DETAILS AS ONLNE ON ONLNE.ASD_STD_ID = MSLOT.ASD_STD_LEGACY_ID
    JOIN GAM.ASSET AS AST ON AST.ASST_ID = ONLNE.ASD_ASST_ID
    JOIN MIGRATION.PROGRESSIVE_POOL AS MPOOL ON MPOOL.[POOL_LEGCY_ID] = PRGP_ID
    WHERE p.[IS_DELETED] = 0 
    ORDER BY MSLOT.[ASD_STD_NEW_ID]
    </Source>
    <Destination>[DataManagement].[AssetLink]</Destination>
    <KeyFormat Format="59_15_{0}" Keys="Id.Id"  />
  </Transformation>

  <!-- Report Components-->

  <Transformation Name="RPT_ORG">
    <Source> SELECT [key],[value] from Organization.Organization </Source>
    <Destination>Organization.Organization</Destination>
  </Transformation>
  <Transformation Name="RPT_SITE">
    <Source> SELECT [key],[value] from Site.Site </Source>
    <Destination>Site.Site</Destination>
  </Transformation>
  <Transformation Name="RPT_TSKGRP">
    <Source> SELECT [key],[value] from Employee.TaskGroup </Source>
    <Destination>[Employee].[TaskGroup]</Destination>
  </Transformation>
  <Transformation Name="RPT_ROLE">
    <Source> SELECT [key],[value] from Employee.Role </Source>
    <Destination>Employee.Role</Destination>
  </Transformation>
  <Transformation Name="RPT_COMPDATA">
    <Source> SELECT [key],[value] from COMPONENTS.ComponentData </Source>
    <Destination>COMPONENTS.ComponentData</Destination>
  </Transformation>
  <Transformation Name="RPT_ASSET">
    <Source> SELECT [key],[value] from DataManagement.Asset </Source>
    <Destination>DataManagement.Asset</Destination>
  </Transformation>
  <Transformation Name="RPT_ASTLINK">
    <Source> SELECT [key],[value] from DataManagement.AssetLink </Source>
    <Destination>DataManagement.AssetLink</Destination>
  </Transformation>
  
</TransformationConfig>