

/*
	
	*********************************************************
	*														*
	*  PreRequisite Name - LegacyAssetHistoryDataPopulation *
	*														*
	*********************************************************
   
   Purpose : To Populating data for historical data migration

 */

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'GAM.TMP_CURRENT_ASSET_UID') AND type in (N'U'))
BEGIN
DROP Table GAM.TMP_CURRENT_ASSET_UID
END
GO


SELECT * INTO GAM.TMP_CURRENT_ASSET_UID
 FROM ( SELECT ASD_STD_ID, ROW_NUMBER() OVER (ORDER BY CREATED_TS) + cpig_counter  AS UID, cpig_counter
FROM GAM.ASSET_STANDARD_DETAILS cross join (select cpig_counter from COMMON.CUSTOM_PRIMARY_ID_GENERATOR
 WHERE CPIG_SLOT_NUMBER = '9999_AMUID') as mxId
WHERE  ASD_CLST_STAT_ID = 5 AND ASD_AM_UID IS NULL ) AS T
GO

--SELECT * FROM GAM.TMP_CURRENT_ASSET_UID
DECLARE @C_UID_UPDATE CURSOR;
DECLARE @P_CURR_ASSET BIGINT;
DECLARE @P_CURR_ASSET_VERSION BIGINT;


SET @C_UID_UPDATE = CURSOR FAST_FORWARD READ_ONLY FOR
SELECT ASD_STD_ID, UID FROM GAM.TMP_CURRENT_ASSET_UID

SET NOCOUNT OFF;
OPEN @C_UID_UPDATE
FETCH NEXT FROM @C_UID_UPDATE INTO @P_CURR_ASSET, @P_CURR_ASSET_VERSION

WHILE @@FETCH_STATUS = 0
BEGIN

;WITH CTE_ASSET_UPDATE 
AS ( 
SELECT DISTINCT @P_CURR_ASSET as CURR_ASSET, CAD.ASD_STD_ID AS ASSET_ID, 
CASE WHEN CAD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID THEN NULL ELSE CAD.CLST_OLD_DATA_ID  END AS ASSET_ID_OLD ,
CAD.CLST_DET_ID,
 1 AS VER
FROM GAM.CHANGELIST_ASSET_DETAIL AS CAD
WHERE CAD.ASD_STD_ID = (@P_CURR_ASSET)  
UNION ALL
SELECT @P_CURR_ASSET CURR_ASSET, CAD.ASD_STD_ID AS ASSET_ID, 
CASE WHEN CAD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID THEN NULL ELSE CAD.CLST_OLD_DATA_ID  END AS ASSET_ID_OLD , 
CAD.CLST_DET_ID,
 VER+1
FROM GAM.CHANGELIST_ASSET_DETAIL AS CAD
JOIN CTE_ASSET_UPDATE T2 ON CAD.ASD_STD_ID = T2.ASSET_ID_OLD
)

UPDATE ASD SET ASD.ASD_am_uid = @P_CURR_ASSET_VERSION
--SELECT *
 FROM CTE_ASSET_UPDATE 
JOIN GAM.ASSET_STANDARD_DETAILS AS ASD  ON ASD.ASD_STD_ID = ASSET_ID
WHERE ASD_AM_UID IS NULL --AND ASD_CLST_STAT_ID <> 2
option (maxrecursion  1000)

print '------------------'
print @P_CURR_ASSET
print @P_CURR_ASSET_VERSION
print '------------------'
FETCH NEXT FROM @C_UID_UPDATE INTO @P_CURR_ASSET, @P_CURR_ASSET_VERSION

 END
 CLOSE @C_UID_UPDATE
 DEALLOCATE @C_UID_UPDATE;

 DECLARE @MAX_ID BIGINT;
 SELECT @MAX_ID = MAX(ASD_AM_UID) FROM GAM.ASSET_STANDARD_DETAILS
 
 UPDATE COMMON.CUSTOM_PRIMARY_ID_GENERATOR
 SET CPIG_COUNTER = @max_id
 WHERE CPIG_SLOT_NUMBER = '9999_AMUID'
 GO

DROP TABLE GAM.TMP_CURRENT_ASSET_UID
GO


IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'Migration')
EXEC ('CREATE SCHEMA MIGRATION;');
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST
END
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_PROPERTY') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_PROPERTY 
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_SITE') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_SITE 
END

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY 
END

GO


IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_CHANGELIST_ASSET_DETAIL') AND name = N'INDX_CHANGE_AST_DTL')
DROP INDEX INDX_CHANGE_AST_DTL ON [MIGRATION].[GAM_CHANGELIST_ASSET_DETAIL]
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_CHANGELIST_ASSET_DETAIL') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_CHANGELIST_ASSET_DETAIL
END

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_GAME_COMBO_HISTORY') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_GAME_COMBO_HISTORY
END

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_HISTORY_GAMES') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_HISTORY_GAMES
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_GAMES_DETAILS') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_GAMES_DETAILS
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAME_DETAIL_COMPONENTS') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAME_DETAIL_COMPONENTS
END
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_DENOMINATION') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_DENOMINATION
END
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_THEME') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_THEME
END
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_THEME_DETAILS') AND type in (N'U'))
BEGIN
DROP TABLE MIGRATION.GAM_THEME_DETAILS
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_MANUFACTURER') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_MANUFACTURER
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.PROGRESSIVE_POOL') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.PROGRESSIVE_POOL
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_ASSET_STANDARD_DETAILS') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_ASSET_STANDARD_DETAILS
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_GAMES_DETAILS') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_GAMES_DETAILS
END
GO

-----------------------------
---View
------------------------------

------------------------------
--	Game Combo Options  --
------------------------------

IF EXISTS(select * FROM sys.views where name = 'VIEW_GAME_COMBO_OPTIONS')
DROP VIEW  [MIGRATION].[VIEW_GAME_COMBO_OPTIONS]
GO

CREATE VIEW [MIGRATION].[VIEW_GAME_COMBO_OPTIONS]
AS
SELECT 
GAME_ID as GO_GAME_ID,
case when value_desc = 'GAME_HOLD_PER' then 'Hold Percent' 
	 when value_desc = 'GAME_WAGER' then 'Max Credit Bet' 
	 when value_desc = 'GAME_PAYLINE' then 'Pay Lines' 
	 when value_desc = 'GAME_REELS' then 'Reels' 
	 when value_desc = 'GAME_PAYTABLE_ID' then 'Paytable' end as Options_Code,

case when value_desc = 'GAME_HOLD_PER' then 1
	 when value_desc = 'GAME_WAGER' then 2
	 when value_desc = 'GAME_PAYLINE' then 3
	 when value_desc = 'GAME_REELS' then 4 
	 when value_desc = 'GAME_PAYTABLE_ID' then 5 end as IdIndex,
	Value as Options_Value,
	Value_desc 
--* 
from (SELECT GAME_ID, GAME_THEM_ID,
cast(isnull(GAME_WAGER, 0 ) as nvarchar) as GAME_WAGER,
cast(isnull(GAME_PAYLINE, 0) as nvarchar) as GAME_PAYLINE,
cast(isnull(GAME_REELS, 0) as nvarchar) as GAME_REELS,
cast(GAME_HOLD_PER as nvarchar) as GAME_HOLD_PER,
cast(GAME_PAYTABLE_ID as nvarchar) as GAME_PAYTABLE_ID,
cast(GAME_PAY_ID as nvarchar) as GAME_PAY_ID,
cast(isnull(GAME_POSITION, 0 ) as nvarchar) as GAME_POSITION
FROM GAM.GAME_DETAILS (nolock) AS GM ) as a
unpivot
(value for value_desc in (GAME_HOLD_PER, GAME_WAGER, GAME_PAYLINE, GAME_REELS, GAME_PAYTABLE_ID) )as tt

GO
------------------------------
-- MANUFACTURER
CREATE TABLE MIGRATION.GAM_MANUFACTURER
(
MNF_LEGCY_ID BIGINT,
MF_NEW_ID BIGINT
)

INSERT INTO MIGRATION.GAM_MANUFACTURER
SELECT MANF_ID, ROW_NUMBER() OVER( ORDER BY MANF_ID) AS RW_NUM
FROM GAM.MANUFACTURER (nolock) AS AR
WHERE IS_DELETED = 0  ORDER BY AR.MANF_ID

GO


-- Denomination
SELECT DENM_ID, COMPONENTS_ID, CODE, DENM_AMOUNT, DENM_AMOUNT_Cents 
INTO [MIGRATION].[GAM_DENOMINATION]
FROM ( SELECT DENM_ID, ROW_NUMBER() OVER (ORDER BY denm_amount ) AS Components_Id, 
ROW_NUMBER() OVER (partition by denm_amount ORDER BY denm_amount ) AS dm_amt_seq,
'Denom Value' as CODE, cast ( CONVERT(DECIMAL(10,2),cast(denm_amount as float)/100) as nvarchar) as DENM_AMOUNT,
DENM_AMOUNT as DENM_AMOUNT_Cents
FROM GAM.DENOMINATION (nolock) AS D  WHERE IS_DELETED = 0 ) AS TT
WHERE TT.DM_AMT_SEQ = 1 
GO

-- THEME
CREATE TABLE MIGRATION.GAM_THEME
(
TME_LEGCY_ID BIGINT,
TME_NEW_ID BIGINT
)
GO
INSERT INTO MIGRATION.GAM_THEME
SELECT THEM_ID, ROW_NUMBER() OVER(ORDER BY THEM_ID) AS RW_NUM
-- select *
FROM GAM.THEME (nolock) AS TM
WHERE IS_DELETED = 0 ORDER BY THEM_ID
GO
-----

SELECT 
TT.TTYP_ID,
TT.TTYP_SHORT_NAME,
TT.TTYP_LONG_NAME,
0 as ThemeType_Id,
tg.TGRP_ID,
tg.TGRP_SHORT_NAME,
TG.TGRP_LONG_NAME,
0 as ThemeGroup_Id,
TC.TCAT_ID,
TC.TCAT_SHORT_NAME,
tc.TCAT_LONG_NAME,
0 as ThemeCategory_Id,
MNF.MANF_ID,
MNF.MANF_SHORT_NAME,
MNF.MANF_LONG_NAME,
0 as Manfacture_Id,
TH.THEM_ID,
TH.THEM_NAME ,
0 as Theme_Id
INTO MIGRATION.GAM_THEME_DETAILS
FROM GAM.THEME_TYPE (nolock) AS TT
JOIN GAM.THEME_GROUP (nolock) AS TG ON TG.TGRP_TTYP_ID = TT.TTYP_ID
JOIN GAM.THEME_CATEGORY (nolock) AS TC ON TC.TCAT_TGRP_ID = TG.TGRP_ID
JOIN GAM.THEME (nolock) AS TH ON TH.theme_cat_id = TC.tcat_id
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MNF.MANF_ID = TH.MANF_ID


---ThemeType_Id
UPDATE TT
SET tt.ThemeType_Id = T_1
--SELECT * 
FROM MIGRATION.GAM_THEME_DETAILS (nolock) as tt
join ( select row_number() over (order by TTYP_SHORT_NAME desc ) as T_1, *
from (select distinct TTYP_SHORT_NAME FROM MIGRATION.GAM_THEME_DETAILS (nolock)) as tt) a
on tt.TTYP_SHORT_NAME = a.TTYP_SHORT_NAME

--ThemeGroup_Id
UPDATE TT
SET tt.ThemeGroup_Id = T_2
--SELECT * 
FROM MIGRATION.GAM_THEME_DETAILS (nolock) as tt
join ( select row_number() over (order by TTYP_SHORT_NAME desc, TGRP_SHORT_NAME) as T_2, *
from (select distinct TTYP_SHORT_NAME, TGRP_SHORT_NAME FROM MIGRATION.GAM_THEME_DETAILS (nolock)) as tt) a
on tt.TTYP_SHORT_NAME = a.TTYP_SHORT_NAME and tt.TGRP_SHORT_NAME = a.TGRP_SHORT_NAME

--ThemeCategory_Id
UPDATE TT
SET tt.ThemeCategory_Id = T_3
--SELECT * 
FROM MIGRATION.GAM_THEME_DETAILS as tt
join ( select row_number() over (order by TTYP_SHORT_NAME desc, TGRP_SHORT_NAME, TCAT_SHORT_NAME) as T_3, *
from (select distinct TTYP_SHORT_NAME, TGRP_SHORT_NAME, TCAT_SHORT_NAME FROM MIGRATION.GAM_THEME_DETAILS) as tt) a
on tt.TTYP_SHORT_NAME = a.TTYP_SHORT_NAME and tt.TGRP_SHORT_NAME = a.TGRP_SHORT_NAME
and tt.TCAT_SHORT_NAME = a.TCAT_SHORT_NAME


--Manfacture_Id
UPDATE TT
SET tt.Manfacture_Id = T_4
--SELECT * 
FROM MIGRATION.GAM_THEME_DETAILS (nolock) as tt
join ( select row_number() over (order by TTYP_SHORT_NAME desc, TGRP_SHORT_NAME, TCAT_SHORT_NAME, MANF_SHORT_NAME) as T_4, *
from (select distinct TTYP_SHORT_NAME, TGRP_SHORT_NAME, TCAT_SHORT_NAME, MANF_SHORT_NAME FROM MIGRATION.GAM_THEME_DETAILS (nolock)) as tt) a
on tt.TTYP_SHORT_NAME = a.TTYP_SHORT_NAME and tt.TGRP_SHORT_NAME = a.TGRP_SHORT_NAME
and tt.TCAT_SHORT_NAME = a.TCAT_SHORT_NAME and tt.MANF_SHORT_NAME = a.MANF_SHORT_NAME

--Theme_Id
UPDATE TT
SET tt.Theme_Id = T_5
--SELECT * 
FROM MIGRATION.GAM_THEME_DETAILS (nolock) as tt
join ( select row_number() over (order by TTYP_SHORT_NAME desc, TGRP_SHORT_NAME, TCAT_SHORT_NAME, MANF_SHORT_NAME, THEM_NAME) as T_5, *
from (select distinct TTYP_SHORT_NAME, TGRP_SHORT_NAME, TCAT_SHORT_NAME, MANF_SHORT_NAME,THEM_NAME FROM MIGRATION.GAM_THEME_DETAILS (nolock)) as tt) a
on tt.TTYP_SHORT_NAME = a.TTYP_SHORT_NAME and tt.TGRP_SHORT_NAME = a.TGRP_SHORT_NAME
and tt.TCAT_SHORT_NAME = a.TCAT_SHORT_NAME and tt.MANF_SHORT_NAME = a.MANF_SHORT_NAME
and tt.THEM_NAME = a.THEM_NAME

----


--- PROGRESSIVE POOL
CREATE TABLE MIGRATION.PROGRESSIVE_POOL
(
POOL_LEGCY_ID BIGINT,
POOL_NEW_ID BIGINT
)

INSERT INTO MIGRATION.PROGRESSIVE_POOL
SELECT PRGP_ID, ROW_NUMBER() OVER(ORDER BY PRGP_ID) AS RW_NUM
-- select *
FROM PROGRESSIVE.[POOL] (nolock) AS P
WHERE IS_DELETED = 0 ORDER BY PRGP_ID

----

CREATE TABLE MIGRATION.GAM_ASSET_STANDARD_DETAILS (
ASD_STD_LEGACY_ID BIGINT, 
ASD_STD_NEW_ID INT
)
GO

--Step 1: --> retriving max pool count

DECLARE @P_AST_ID BIGINT;
SELECT @P_AST_ID = MAX(POOL_NEW_ID) FROM MIGRATION.PROGRESSIVE_POOL

--Step 2: --> adding max pool count + slot running number
INSERT INTO MIGRATION.GAM_ASSET_STANDARD_DETAILS
SELECT ASD_STD_ID, @P_AST_ID + ROW_NUMBER() OVER(ORDER BY ASD_AM_UID) AS RW_NUM  FROM GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD 
WHERE IS_DELETED = 0 AND ASD_CLST_STAT_ID = 5 and ASD_AM_UID is not null  ORDER BY ASD.ASD_AM_UID 

GO


CREATE TABLE [MIGRATION].[GAM_CH_ASSET_HISTORY_CHANGELIST](
	[CL_RW_ID] [bigint] NOT NULL,
	[CLST_ID] [bigint] NOT NULL,
	[Is_History_Completed] [bit] NULL,
	CL_HISTORY_START_DATE DATETIME,
	CL_HISTORY_END_DATE DATETIME
) ON [PRIMARY]

GO

--------------------------------------------------
-----Start--**Inital transaction master tables**--
--------------------------------------------------
--1.GAM_CH_ASSET_HISTORY_CHANGELIST
--2.GAM_CHANGELIST_ASSET_DETAIL
--3.GAM_GAME_COMBO_HISTORY
--------------------------------------------------

--Populating Changelist History Table
INSERT INTO MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST 
SELECT ROW_NUMBER()over(order by cl.CLST_EXECTUED_DATE asc, cl.CREATED_TS) AS CL_RW_ID,
CLST_ID, 
--(SELECT COUNT(*) FROM MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST)+1 AS CL_RW_ID,
CAST(0 as bit) as Is_History_Completed, NULL, NULL
FROM GAM.CHANGE_LIST as cl
WHERE CLST_ASSET_TYPE = 1 AND CL.IS_DELETED = 0
ORDER BY cl.CLST_EXECTUED_DATE asc, cl.CREATED_TS 

---GAM_CHANGELIST_ASSET_DETAIL
SELECT * INTO MIGRATION.GAM_CHANGELIST_ASSET_DETAIL
from ( SELECT  ROW_NUMBER() OVER (ORDER BY CLST_EXECTUED_DATE, [ASD_AM_UID]) AS RN,  *  
FROM (SELECT C.CLST_ID, CAD.[CLST_DET_ID], ASD.ASD_STD_ID, C.CLST_EXECTUED_DATE, [ASD_AM_UID] 
FROM [GAM].[CHANGELIST_ASSET_DETAIL](nolock) as cad
join [GAM].[CHANGE_LIST](nolock) as c on c.clst_id = cad.clst_id
join [GAM].[ASSET_STANDARD_DETAILS](nolock) as asd on asd.asd_std_id = cad.asd_std_id
WHERE C.[CLST_ASSET_TYPE] = 1 AND ASD.[ASD_CLST_STAT_ID] = 5 ) AS TT ) asmst
ORDER BY RN
GO

CREATE NONCLUSTERED INDEX [INDX_CHANGE_AST_DTL]
ON [MIGRATION].[GAM_CHANGELIST_ASSET_DETAIL] ([CLST_DET_ID])
INCLUDE ([RN])
GO

--Game id to unique id mapping
SELECT ROW_NUMBER()OVER(ORDER BY GAME_ID) AS h_ID, GAME_ID 
INTO MIGRATION.GAM_GAME_COMBO_HISTORY
FROM GAM.GAME_DETAILS (nolock)
ORDER BY CREATED_TS 

--------------------------------------------------
-----End--**Inital transaction master tables**--
--------------------------------------------------


--GAM_PROPERTY
CREATE TABLE MIGRATION.GAM_PROPERTY (
PROP_LEGCY_ID BIGINT,
PROP_NEW_ID BIGINT,
PROP_SHORT_NAME VARCHAR(128),
PROP_PARENT_CODE VARCHAR(5),
PROP_TYPE VARCHAR(32),
PROP_DEPTH_LEVEL INT
)
GO

--POPULATING PROPERTY TABLE
INSERT INTO MIGRATION.GAM_PROPERTY (PROP_LEGCY_ID, PROP_SHORT_NAME, PROP_NEW_ID)
SELECT PROP_ID, PROP_SHORT_NAME, ROW_NUMBER() OVER (ORDER BY CREATED_TS)  AS NEW_SEQ FROM GAM.PROPERTY (nolock) WHERE IS_DELETED = 0 AND  PROP_ID NOT IN (1)
GO

--GAM_SITE
CREATE TABLE MIGRATION.GAM_SITE (
SITE_LEGCY_ID BIGINT,
SITE_NEW_ID BIGINT,
SITE_NUMBER BIGINT,
SITE_CODE VARCHAR(5),
SITE_LICENSEE VARCHAR(128),
SITE_LICENSE_NUM VARCHAR(16)
)

GO

INSERT INTO MIGRATION.GAM_SITE (SITE_LEGCY_ID, SITE_NUMBER, SITE_NEW_ID)
SELECT SITE_ID, SITE_NUMBER, SITE_NUMBER FROM GAM.[SITE] (nolock) WHERE IS_DELETED = 0 
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY]') AND type in (N'U'))
BEGIN
CREATE TABLE [MIGRATION].GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY(
       [GH_SUM_ID] [bigint] NOT NULL PRIMARY KEY,
       [CLST_NAME] [nvarchar](128) NOT NULL,
       [CLST_ID] [bigint] NULL,
       [Current_Id] [bigint] NULL,
       [Pre_Id] [bigint] NULL,
       [Asst_Histry_Id] [bigint] NULL,
       [ASD_NUMBER] [varchar](16) NULL,
       [ASD_AM_UID] [bigint] NULL,
       [ASD_DELETED] [bit] NULL,
       [CLST_STAT_DESCRIPTION] [nvarchar](64) NULL,
       [ACTION] [nvarchar](64) NULL,
       [SOURCE_SITE] [nvarchar](64) NULL,
       [DEST_SITE] [nvarchar](64) NULL,
       [CLST_SCHEDULED_DATE] [datetime] NULL,
       [CLST_EXECTUED_DATE] [datetime] NULL,
       [CLSA_CODE] [nvarchar](64) NULL,
       [ASSET_TYPE] [nvarchar](64) NULL,
       [ASTL_DATA_SOURCE] [nvarchar](64) NULL,
       [CREATED_USER] [nvarchar](32) NOT NULL,
       [CLST_AUTH_USER] [nvarchar](32) NULL,
       [CLST_AUTH_USER_SECOND] [nvarchar](32) NULL,
       [CLST_DET_ID] [bigint] NULL,
       [Site_OrganizationId] [bigint] NULL,
       [Site_OrganizationName] [nvarchar](64) NULL,
       [SiteId] [bigint] NULL,
       [SiteNumber] [bigint] NULL,
       [CreatedBy_UserId] [nvarchar](32) NULL,
       [CreatedBy_LoginName] [nvarchar](30) NULL,
       [CreatedBy_FirstName] [nvarchar](30) NULL,
       [CreatedBy_MiddleName] [nvarchar](30) NULL,
       [CreatedBy_LastName] [nvarchar](30) NULL,
       [ApprovedBy_UserId] [nvarchar](32) NULL,
       [ApprovedBy_LoginName] [nvarchar](30) NULL,
       [ApprovedBy_FirstName] [nvarchar](30) NULL,
       [ApprovedBy_MiddleName] [nvarchar](30) NULL,
       [ApprovedBy_LastName] [nvarchar](30) NULL,
       [Asset_Is_Latest] [bit] NULL
) ON [PRIMARY]
END
GO
--drop constraint
--ALTER TABLE MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY
--DROP CONSTRAINT PK_GH_SUM_ID;
--GO
--add constraint
--ALTER TABLE MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY
--ADD CONSTRAINT PK_GH_SUM_ID PRIMARY KEY(GH_SUM_ID)
--GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY]') AND name = N'INDX_CHK_GH_SUM_ID')
DROP INDEX  [INDX_CHK_GH_SUM_ID] ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY]
GO

CREATE NONCLUSTERED INDEX [INDX_CHK_GH_SUM_ID] ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY]
(
	[GH_SUM_ID] ASC
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, 
SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
ONLINE = OFF, ALLOW_ROW_LOCKS = ON, 
ALLOW_PAGE_LOCKS = ON) 
ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX IDX_GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY_CLST_ID ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY] ([CLST_ID])
GO

CREATE NONCLUSTERED INDEX IDX_GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY_L2 ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY] ([CLST_ID],[SiteNumber])
INCLUDE ([Current_Id],[Pre_Id],[SOURCE_SITE],[DEST_SITE]) 
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS]') AND type in (N'U'))
BEGIN
CREATE TABLE [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS](
       [GH_OPTN_ID] [bigint] NOT NULL PRIMARY KEY,
       [CHANGELIST_NAME] [nvarchar](128) NOT NULL,
       [CHANGELIST_ID] [bigint] NOT NULL,
       [CLST_ASD_ID] [bigint] NOT NULL,
       [ASD_AM_UID] [bigint] NULL,
       [ASD_NUMBER] [varchar](16) NULL,
       [ASD_LOCATION] [varchar](32) NULL,
       [OLD_ASD_NUMBER] [varchar](16) NULL,
       [OLD_ASD_LOCATION] [varchar](32) NULL,
       [ACTION] [nvarchar](64) NOT NULL,
       [OPTN_CODE] [nvarchar](64) NOT NULL,
       [OPTN_NAME] [nvarchar](64) NOT NULL,
       [CURRENT_VALUE] [nvarchar](256) NULL,
       [OLD_VALUE] [nvarchar](256) NULL,
       [OPTION_ORDER] [int] NOT NULL,
       [IS_UPDATED] [bit] NULL,
       [CUR_ASD_STD_ID] [bigint] NOT NULL,
       [PRE_ASD_STD_ID] [bigint] NULL,
       [ASTL_DATA_SOURCE] [nvarchar](64) NULL,
       [EXECUTED_DATETIME] [datetime] NULL
) ON [PRIMARY]
END
GO


--Drop constraint
--ALTER TABLE MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS
--DROP CONSTRAINT PK_GH_OPTN_ID;
--GO

----Add constraint
--ALTER TABLE MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS
--ADD CONSTRAINT PK_GH_OPTN_ID PRIMARY KEY(GH_OPTN_ID)
--GO


IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS]') AND name = N'INDX_CHK_GH_OPTN_ID')
DROP INDEX  [INDX_CHK_GH_OPTN_ID] ON [MIGRATION].GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS
GO

CREATE NONCLUSTERED INDEX [INDX_CHK_GH_OPTN_ID] ON [MIGRATION].GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS
(
	[GH_OPTN_ID] ASC
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, 
SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
ONLINE = OFF, ALLOW_ROW_LOCKS = ON, 
ALLOW_PAGE_LOCKS = ON) 
ON [PRIMARY]
GO


--PROGRESSIVE

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE]') AND type in (N'U'))
BEGIN
CREATE TABLE [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE](
       [GH_PROG_ID] [bigint] NOT NULL PRIMARY KEY,
       [CLST_ID] [bigint] NOT NULL,
       [Changelist_Name] [nvarchar](128) NOT NULL,
       [CLST_DET_ID] [bigint] NOT NULL,
       [ASD_AM_UID] [bigint] NULL,
       [ACTION] [nvarchar](64) NULL,
       [PoolId_Old] [bigint] NULL,
       [PoolId_Current] [bigint] NULL,
       [PoolName_Old] [nvarchar](256) NULL,
       [PoolName_Current] [nvarchar](256) NULL,
       [CLST_UNIQUE_ID] [nvarchar](32) NULL,
       [CLST_INSMAP_ID] [bigint] NOT NULL,
       [CLST_EXECTUED_DATE] [datetime] NULL
) ON [PRIMARY]
END
GO



IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE]') AND name = N'INDX_CHK_GH_PROG_ID')
DROP INDEX  [INDX_CHK_GH_PROG_ID] ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE]
GO

CREATE NONCLUSTERED INDEX [INDX_CHK_GH_PROG_ID] ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE]
(
	[GH_PROG_ID] ASC
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, 
SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
ONLINE = OFF, ALLOW_ROW_LOCKS = ON, 
ALLOW_PAGE_LOCKS = ON) 
ON [PRIMARY]
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_OPTIONS_VALUE]') AND type in (N'U'))
BEGIN
CREATE TABLE [MIGRATION].GAM_CHK_ASSET_SLOT_OPTIONS_VALUE(
       [P_ASD_ID] [bigint] NULL,
       [P_SITE_NUM] [int] NULL,
       [P_SITE_TYPE] [int] NULL,
       [P_ASD_OPTN_VALUE] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_ASSET_SLOT_OPTIONS_VALUE]') AND name = N'INDX_CHK_SLT_OPTN_VAL')
DROP INDEX  [INDX_CHK_SLT_OPTN_VAL] ON [MIGRATION].[GAM_CHK_ASSET_SLOT_OPTIONS_VALUE]
GO

CREATE NONCLUSTERED INDEX [INDX_CHK_SLT_OPTN_VAL] ON [MIGRATION].[GAM_CHK_ASSET_SLOT_OPTIONS_VALUE]
(
	[P_ASD_ID] ASC
)
INCLUDE ( [P_ASD_OPTN_VALUE]) 
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, 
SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
ONLINE = OFF, ALLOW_ROW_LOCKS = ON, 
ALLOW_PAGE_LOCKS = ON) 
ON [PRIMARY]
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_HISTORY_SLOT_GAMES_MAPPING]') AND type in (N'U'))
BEGIN
CREATE TABLE [MIGRATION].GAM_CHK_HISTORY_SLOT_GAMES_MAPPING(
       [Idx] [bigint] NOT NULL PRIMARY KEY,
	   [Gmap_Id_Seq] [bigint] NULL,
       [GM_ASD_STD_ID] [bigint] NOT NULL,
       [Game_Id] [bigint] NULL,
       [ASD_AM_UID] [bigint] NULL,
       [gmOptionName] [varchar](16) NULL,
       [Code] [varchar](32) NOT NULL,
       [Seq] [int] NULL,
       [GmOptionValue] [nvarchar](128) NULL,
       [Comp_Id] [varchar](16) NULL,
       [Game_AssetId] [bigint] NULL
) ON [PRIMARY]
END
GO


IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_CHK_HISTORY_SLOT_GAMES_MAPPING]') AND name = N'INDX_CHK_HSTRY_SLT_GMS_MAP')
DROP INDEX [INDX_CHK_HSTRY_SLT_GMS_MAP] ON [MIGRATION].[GAM_CHK_HISTORY_SLOT_GAMES_MAPPING]
GO
CREATE NONCLUSTERED INDEX [INDX_CHK_HSTRY_SLT_GMS_MAP] ON [MIGRATION].[GAM_CHK_HISTORY_SLOT_GAMES_MAPPING]
(
	[GM_ASD_STD_ID] ASC
)
INCLUDE ( 	[gmOptionName],
	[Code],
	[Seq],
	[GmOptionValue]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO




--procedure


IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_CHL_ASSET_SLOT_HISTORY_SUMMARY')
DROP PROCEDURE MIGRATION.P_CHL_ASSET_SLOT_HISTORY_SUMMARY
GO

CREATE PROCEDURE MIGRATION.P_CHL_ASSET_SLOT_HISTORY_SUMMARY (@P_CLST_ID BIGINT, @P_CH_INDEX BIGINT)
AS
DECLARE @P_GH_SUM_ID_MAX BIGINT;
--DECLARE @P_CH_INDEX BIGINT;
--DECLARE @P_CLST_ID BIGINT
--SET @P_CH_INDEX = 2137
--SET @P_CLST_ID = 709901001000013039
SELECT @P_GH_SUM_ID_MAX = COUNT(GH_SUM_ID) FROM MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY

INSERT INTO MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY
SELECT 
--CAST(
----CAST(ASD.ASD_AM_UID as nvarchar) + 
--format(@P_CH_INDEX, '000000') +
--format(ROW_NUMBER()OVER(order by cl.clst_id ), '0000000000') as bigint) AS Id,
ROW_NUMBER()OVER(order by cl.clst_id ) + @P_GH_SUM_ID_MAX as GH_SUM_ID,
CL.CLST_NAME AS CLST_NAME,
CL.CLST_ID AS CLST_ID,
CAD.ASD_STD_ID as Current_Id,
ASDOLD.ASD_STD_ID as Pre_Id,
MCD.RN as Asst_Histry_Id,
ASD.ASD_NUMBER,
ASD.ASD_AM_UID,
ASD.IS_DELETED AS ASD_DELETED,
STS.CLST_STAT_DESCRIPTION,

CASE WHEN ACT.CLSA_CODE = 'ADD' THEN 'Add'
     WHEN ACT.CLSA_CODE = 'EDIT' THEN 'Edit'
     WHEN ACT.CLSA_CODE = 'MOVE' THEN 'Move'
     WHEN ACT.CLSA_CODE = 'MOVE & EDIT' THEN 'MoveEdit'
	 WHEN ACT.CLSA_CODE = 'DELETE' THEN 'Delete'
ELSE 'None' END AS [ACTION],
CASE ACT.CLSA_ID WHEN 1001 THEN dest_ST.site_short_name ELSE src_ST.site_short_name END AS SOURCE_SITE,
CASE ACT.CLSA_ID WHEN 1001 THEN NULL ELSE dest_ST.site_short_name END AS DEST_SITE,
CL.CLST_SCHEDULED_DATE,
CL.CLST_EXECTUED_DATE,
ACT.CLSA_CODE,
ASSET.ASST_NAME AS ASSET_TYPE,
ASTL_DATA_SOURCE,
CL.CREATED_USER,
CL.CLST_AUTH_USER,
cl.CLST_AUTH_USER_SECOND,
CAD.CLST_DET_ID,
GPT.[PROP_NEW_ID] as Site_OrganizationId,
PT.PROP_LONG_NAME as Site_OrganizationName,
dest_ST.SITE_NUMBER as SiteId,
dest_ST.SITE_NUMBER as SiteNumber,
CreatedBy_UserId,
CreatedBy_LoginName,
CreatedBy_FirstName,
CreatedBy_MiddleName,
CreatedBy_LastName,

ApprovedBy_UserId,
ApprovedBy_LoginName,
ApprovedBy_FirstName,
ApprovedBy_MiddleName,
ApprovedBy_LastName,
case when ASD.Is_Deleted = 0 then cast(1 as bit) else cast(0 as bit) end as Asset_Is_Latest
FROM MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST (nolock) AS TR 
JOIN GAM.CHANGE_LIST (nolock) AS CL ON TR.CLST_ID = CL.CLST_ID
JOIN GAM.CHANGE_LIST_STATUS (nolock) AS STS ON CL.CLST_STAT_ID = STS.CLST_STAT_ID
--JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS CISM ON CL.CLST_INSMAP_ID = CISM.INSM_ID
--JOIN GAM.[SITE] (nolock) AS ST ON ST.SITE_ID = CISM.INSM_SITE_ID
--JOIN MIGRATION.GAM_SITE (nolock) AS GST ON GST.[SITE_LEGCY_ID] = ST.SITE_ID
--JOIN GAM.PROPERTY (nolock) AS pt ON pt.PROP_ID = ST.SITE_PROP_ID
--join [MIGRATION].[GAM_PROPERTY] (nolock) as gpt on gpt.[PROP_LEGCY_ID] = pt.PROP_ID
JOIN GAM.ASSET (nolock) AS ASSET ON CL.CLST_ASSET_TYPE = ASSET.ASST_ID
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CL.CLST_ID = CAD.CLST_ID
JOIN MIGRATION.GAM_CHANGELIST_ASSET_DETAIL (nolock) AS MCD ON MCD.CLST_DET_ID = CAD.CLST_DET_ID
LEFT JOIN GAM.ASSET_TRANSFER_LIST (nolock) AS AT ON AT.ASTL_CLST_ID = CL.CLST_ID
JOIN GAM.[ACTION] (nolock) AS ACT ON ACT.CLSA_ID = CAD.CLSA_ID
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD ON ASD.ASD_STD_ID = CAD.ASD_STD_ID
JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS ISM ON ISM.INSM_ID = ASD.ASD_INSMAP_ID
JOIN GAM.[SITE] (nolock) AS dest_ST ON dest_ST.SITE_ID = ISM.INSM_SITE_ID
JOIN GAM.PROPERTY (nolock) AS pt ON pt.PROP_ID = dest_ST.SITE_PROP_ID
JOIN [MIGRATION].[GAM_PROPERTY] (nolock) as gpt on gpt.[PROP_LEGCY_ID] = pt.PROP_ID
LEFT JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASDOLD ON ASDOLD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID
LEFT JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS ISMOLD ON ISMOLD.INSM_ID = ASDOLD.ASD_INSMAP_ID
LEFT JOIN GAM.[SITE] (nolock) AS src_ST ON src_ST.SITE_ID = ISMOLD.INSM_SITE_ID
LEFT JOIN MIGRATION.GAM_SITE (nolock) AS src_GST ON src_GST.[SITE_LEGCY_ID] = src_ST.SITE_ID
LEFT JOIN GAM.PROPERTY (nolock) AS src_pt ON src_pt.PROP_ID = dest_ST.SITE_PROP_ID
LEFT JOIN [MIGRATION].[GAM_PROPERTY] (nolock) as src_gpt on src_gpt.[PROP_LEGCY_ID] = src_pt.PROP_ID
LEFT JOIN PROGRESSIVE.SLOT (nolock) as prgSlot on prgSlot.asd_std_id = CAD.ASD_STD_ID 

LEFT JOIN ( select clst_id,  
max(case when CL.CREATED_USER = 'Auto Sync' then 'Sync' else cUsr.actr_user_id end) as CreatedBy_UserId,
max(case when CL.CREATED_USER = 'Auto Sync' then 'Sync' else cUsr.actr_login end) as CreatedBy_LoginName,
max(case when CL.CREATED_USER = 'Auto Sync' then 'Sync' else cUsr.actr_First_name end) as CreatedBy_FirstName,
max(case when CL.CREATED_USER = 'Auto Sync' then 'Sync' else cUsr.actr_middle_name end) as CreatedBy_MiddleName,
max(case when CL.CREATED_USER = 'Auto Sync' then 'Sync' else cUsr.actr_last_name end) as CreatedBy_LastName,

max(case when CL.CLST_AUTH_USER = 'Auto Sync' then 'Sync' else aUsr.actr_user_id end) as ApprovedBy_UserId,
max(case when CL.CLST_AUTH_USER = 'Auto Sync' then 'Sync' else aUsr.actr_login end) as ApprovedBy_LoginName,
max(case when CL.CLST_AUTH_USER = 'Auto Sync' then 'Sync' else aUsr.actr_First_name end) as ApprovedBy_FirstName,
max(case when CL.CLST_AUTH_USER = 'Auto Sync' then 'Sync' else aUsr.actr_middle_name end) as ApprovedBy_MiddleName,
max(case when CL.CLST_AUTH_USER = 'Auto Sync' then 'Sync' else aUsr.actr_last_name end) as ApprovedBy_LastName
FROM GAM.CHANGE_LIST (nolock) AS CL 
LEFT JOIN (SELECT * FROM COMMON.USER_ACTOR (nolock) where ACTR_IS_DELETED = 0) as aUsr on isnull(aUsr.ACTR_ACTIVE_DIR_USER, aUsr.actr_login) = CLST_AUTH_USER
LEFT JOIN (SELECT * FROM COMMON.USER_ACTOR (nolock) where ACTR_IS_DELETED = 0) as bUsr on isnull(bUsr.ACTR_ACTIVE_DIR_USER, bUsr.actr_login) = CLST_AUTH_USER_SECOND
LEFT JOIN (SELECT * FROM COMMON.USER_ACTOR (nolock)) as cUsr on isnull(cUsr.actr_login, cUsr.ACTR_ACTIVE_DIR_USER) = CL.CREATED_USER
WHERE CLST_ID = @P_CLST_ID GROUP BY CLST_ID ) as CL_EMP ON CL_EMP.CLST_ID = CL.CLST_ID

WHERE ASD.ASD_CLST_STAT_ID = 5 AND ASSET.ASST_ID = 1
AND ASD.ASD_AM_UID IS NOT NULL
and CL.CLST_ID = @P_CLST_ID
GO


IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_CHK_ASSET_SLOT_HISTORY_OPTIONS')
DROP PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_HISTORY_OPTIONS
GO

CREATE PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_HISTORY_OPTIONS (@P_CLST_ID BIGINT, @P_CH_INDEX BIGINT)
AS
DECLARE @P_GH_OPTN_ID BIGINT;
--DECLARE @P_CH_INDEX BIGINT;
--DECLARE @P_CLST_ID BIGINT
--SET @P_CLST_ID = 709901001000000419
SELECT @P_GH_OPTN_ID = COUNT(GH_OPTN_ID) FROM MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS

INSERT INTO MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_OPTIONS
SELECT 
--CAST(
--format(@P_CH_INDEX, '000000') +
----CAST(@P_AM_UID as nvarchar) + 
--format(ROW_NUMBER()OVER(order by CHANGELIST_ID ), '0000000000') as bigint) AS Id,
ROW_NUMBER()OVER(order by CHANGELIST_ID ) + @P_GH_OPTN_ID as GH_OPTN_ID,
CHANGELIST_NAME, CHANGELIST_ID, CLST_ASD_ID, 
 ASD_AM_UID, ASD_NUMBER, ASD_LOCATION, OLD_ASD_NUMBER, OLD_ASD_LOCATION,
 [ACTION], OPTN_CODE,OPTN_NAME, CURRENT_VALUE, OLD_VALUE, OPTION_ORDER, 
CASE WHEN CURRENT_VALUE <> ISNULL(OLD_VALUE, CURRENT_VALUE) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END IS_UPDATED,
--FINAL_DISPLAY,
CUR_ASD_STD_ID, PRE_ASD_STD_ID,
ASTL_DATA_SOURCE, EXECUTED_DATETIME
--REC_COUNT, COMPARED_FLAG
--CASE WHEN [ACTION_ID] = 1001 THEN DEST_SITE ELSE SOURCE_SITE END AS SOURCE_SITE, DEST_SITE
-- ASD_SERIAL_NUM, MANF_LONG_NAME, AST_IS_DELETED, OLD_OPTN_ID, OLD_OPTN_VALUE, CL_CREATED_TS, 
-- CREATED_TS, IS_TYPE_CODE_VALUE, OPTN_CUSTOM, FINAL_DISPLAY, 

FROM  (SELECT ASD_NUMBER,  ASD_LOCATION,  ASD_SERIAL_NUM, OLD_ASD_NUMBER, 
OLD_ASD_LOCATION,  MANF_LONG_NAME, ASD_AM_UID, CREATED_TS, CL_CREATED_TS, SOURCE_SITE, DEST_SITE,
OPTN_CODE,OPTN_NAME, OPTN_DESCRIPTION, ASSET_TYPE, OPTION_ORDER,  ACTION_CODE AS [ACTION], AST_IS_DELETED,

CASE CUR_DATA.ACTION_ID WHEN 1001 THEN CUR_DATA.AST_OPTION_ID
 ELSE OLD_DATA.AST_OPTION_ID END AS OLD_OPTN_ID,

CASE CUR_DATA.ACTION_ID WHEN 1001 THEN CUR_DATA.CURRENT_VALUE
ELSE OLD_DATA.OLD_VALUE  END AS OLD_OPTN_VALUE,

CUR_DATA.ACTION_ID AS [ACTION_ID], CUR_DATA.ASD_STD_ID,  0 AS ACTION_COUNT,
CUR_DATA.AST_OPTION_ID AS CUR_DATA_AST_OPTION_ID,

CASE CUR_DATA.ACTION_ID   WHEN 1001 THEN CUR_DATA.AST_OPTION_ID   ELSE OLD_DATA.AST_OPTION_ID
END AS OLD_DATA_AST_OPTION_ID,

(CASE CUR_DATA.ACTION_ID   WHEN 1001 THEN CASE 
WHEN LTRIM(RTRIM(ISNULL(CUR_DATA.CURRENT_VALUE,''))) = '' THEN CUR_DATA.CURRENT_VALUE
ELSE '-'+CUR_DATA.CURRENT_VALUE END ELSE OLD_DATA.OLD_VALUE END) AS OLD_VALUE_CPRE,

--CURRENT_VALUE, OLD_VALUE,

CASE WHEN CURRENT_VALUE <> ISNULL(OLD_VALUE, CURRENT_VALUE) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END COMPARED_FLAG,


CASE WHEN OPTN_CODE in ('ASSET.GMU.CRC.AUTH', 'ASSET.CASLESS.DISAB', 'OPTION.CODE.ENROLMENT.STATUS') THEN 
	(CASE	WHEN CURRENT_VALUE = 'FLAG.NO' then 'N'
		WHEN CURRENT_VALUE = 'FLAG.F' then 'F'
		WHEN CURRENT_VALUE = 'FLAG.YES' then 'Y'
		WHEN CURRENT_VALUE = '' then 'N' END)
     WHEN OPTN_CODE = ('BILL.VALIDATOR.CAPACITY') THEN 
		(CASE	WHEN CURRENT_VALUE = '' then '100'
			WHEN CURRENT_VALUE IS NULL then '100'
			ELSE CURRENT_VALUE END)
 ELSE 
  (CASE WHEN CURRENT_VALUE = 'FLAG.NO' then 'No'
      WHEN CURRENT_VALUE = 'FLAG.BAL' then 'Balance'
      WHEN CURRENT_VALUE = 'FLAG.YES' then 'Yes'
      WHEN CURRENT_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.NORMAL' then 'Normal'
      WHEN CURRENT_VALUE = 'VALIDATION.SYSTEM' then 'System'
      WHEN CURRENT_VALUE = 'ETHERNET' then 'Ethernet'
      WHEN CURRENT_VALUE = 'PROTOCOL.TYPE.SAS' then 'SAS'
      WHEN CURRENT_VALUE = 'ASSET.CONFIG.STATUS.OFFLINE' then 'Offline'
      WHEN CURRENT_VALUE = 'ASSET.CONFIG.STATUS.ONLINE' then 'Online'
      WHEN CURRENT_VALUE = 'CONTROLLER.TYPE.THIRDPARTY' then 'Third Party'
      WHEN CURRENT_VALUE = 'ASSET.TYPE.EGM' THEN 'EGM'
      WHEN CURRENT_VALUE = 'PROTOCOL.TYPE.QCOMM' THEN 'QCOMM'
      WHEN CURRENT_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.WITH.CCCE' THEN 'With CCCE'
      WHEN CURRENT_VALUE = 'KIOSK.TYPE.K' THEN 'K'
      WHEN CURRENT_VALUE = 'VALIDATION.ENHANCED' THEN 'Enhanced'
      WHEN CURRENT_VALUE = '-------------Select-------------' THEN ''
      WHEN CURRENT_VALUE = 'SM.SERVER.DOWN' THEN 'Server Down'
      WHEN CURRENT_VALUE = 'METER.TYPE.BCD' THEN 'BCD'
      ELSE CURRENT_VALUE end) END as CURRENT_VALUE,

CASE WHEN OPTN_CODE in ('ASSET.GMU.CRC.AUTH', 'ASSET.CASLESS.DISAB', 'OPTION.CODE.ENROLMENT.STATUS') THEN 
	(CASE	WHEN OLD_VALUE = 'FLAG.NO' then 'N'
		WHEN OLD_VALUE = 'FLAG.F' then 'F'
		WHEN OLD_VALUE = 'FLAG.YES' then 'Y' 
		WHEN OLD_VALUE = '' then 'N' END )
    WHEN OPTN_CODE = ('BILL.VALIDATOR.CAPACITY') THEN 
		(CASE	WHEN OLD_VALUE = '' then '100'
			WHEN OLD_VALUE IS NULL then '100'
			ELSE OLD_VALUE END)
 ELSE 
  (CASE WHEN OLD_VALUE = 'FLAG.NO' then 'No'
      WHEN OLD_VALUE = 'FLAG.BAL' then 'Balance'
      WHEN OLD_VALUE = 'FLAG.YES' then 'Yes'
      WHEN OLD_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.NORMAL' then 'Normal'
      WHEN OLD_VALUE = 'VALIDATION.SYSTEM' then 'System'
      WHEN OLD_VALUE = 'ETHERNET' then 'Ethernet'
      WHEN OLD_VALUE = 'PROTOCOL.TYPE.SAS' then 'SAS'
      WHEN OLD_VALUE = 'ASSET.CONFIG.STATUS.OFFLINE' then 'Offline'
      WHEN OLD_VALUE = 'ASSET.CONFIG.STATUS.ONLINE' then 'Online'
      WHEN OLD_VALUE = 'CONTROLLER.TYPE.THIRDPARTY' then 'Third Party'
      WHEN OLD_VALUE = 'ASSET.TYPE.EGM' THEN 'EGM'
      WHEN OLD_VALUE = 'PROTOCOL.TYPE.QCOMM' THEN 'QCOMM'
      WHEN OLD_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.WITH.CCCE' THEN 'With CCCE'
      WHEN OLD_VALUE = 'KIOSK.TYPE.K' THEN 'K'
      WHEN OLD_VALUE = 'VALIDATION.ENHANCED' THEN 'Enhanced'
      WHEN OLD_VALUE = '-------------Select-------------' THEN ''
      WHEN OLD_VALUE = 'SM.SERVER.DOWN' THEN 'Server Down'
      WHEN OLD_VALUE = 'METER.TYPE.BCD' THEN 'BCD'
      ELSE OLD_VALUE end) END as OLD_VALUE,


CASE (CASE CUR_DATA.ACTION_ID   WHEN 1001 THEN 1
ELSE CASE WHEN ISNULL(CUR_DATA.CURRENT_VALUE,'') <> ISNULL(OLD_DATA.OLD_VALUE,'') THEN 1 ELSE 0
END  END)
WHEN 1 THEN 1 ELSE ROW_NUMBER() OVER(PARTITION BY ASD_AM_UID, CREATED_TS, CUR_DATA.ASD_STD_ID,CUR_DATA.ACTION_ID, 
(CASE CUR_DATA.ACTION_ID WHEN 1001 THEN 1  ELSE CASE WHEN ISNULL(CUR_DATA.CURRENT_VALUE,'') <> ISNULL(OLD_DATA.OLD_VALUE,'')THEN 1
 ELSE 0  END END)
ORDER BY ASD_AM_UID, CREATED_TS, CUR_DATA.ASD_STD_ID, CUR_DATA.ACTION_ID, 
(CASE CUR_DATA.ACTION_ID  WHEN 1001 THEN 1  ELSE CASE
 WHEN ISNULL(CUR_DATA.CURRENT_VALUE,'') <> ISNULL(OLD_DATA.OLD_VALUE,'')THEN 1
ELSE 0  END  END)) END AS FINAL_DISPLAY,

CUR_DATA.ASD_STD_ID AS CUR_ASD_STD_ID,
CUR_DATA.OLD_ASD_STD_ID AS PRE_ASD_STD_ID,

CHANGELIST_NAME, CHANGELIST_ID, CLST_ASD_ID, EXECUTED_DATETIME, 
IS_TYPE_CODE_VALUE, OPTN_CUSTOM, ASTL_DATA_SOURCE 
FROM ( (SELECT ASDCURRENT.ASD_NUMBER, ASDCURRENT.ASD_LOCATION,
ASDCURRENT.ASD_SERIAL_NUM,  MANF.MANF_LONG_NAME,   ASDCURRENT.ASD_AM_UID,
CL.CLST_EXECTUED_DATE AS CREATED_TS,   CAD.CREATED_TS AS CL_CREATED_TS,
INDCURRENT.INSM_NAME AS DEST_SITE, OTPN.OPTN_CODE,OPTN_NAME, OTPN.OPTN_DESCRIPTION,
AD.AST_OPTION_ID, AD.AST_OPTN_VALUE AS CURRENT_VALUE,
ASSET.ASST_NAME AS ASSET_TYPE,   ASDCURRENT.ASD_ASST_ID AS ASSET_TYPE_ID,
ADEF.ASTDFN_OPTN_ORDER AS OPTION_ORDER,  CAD.CLSA_ID AS ACTION_ID,
ACTION.CLSA_CODE AS ACTION_CODE, ASDCURRENT.IS_DELETED AS AST_IS_DELETED,
AD.AST_DET_ID, ASDCURRENT.ASD_STD_ID, CAD.CLST_OLD_DATA_ID AS OLD_ASD_STD_ID,
CLST_DET_ID AS CLST_ASD_ID,  CL.CLST_NAME AS CHANGELIST_NAME, CL.CLST_ID AS CHANGELIST_ID,
CL.CLST_EXECTUED_DATE AS EXECUTED_DATETIME,
0 AS IS_TYPE_CODE_VALUE, OPTN_CUSTOM, ASTL_DATA_SOURCE
FROM GAM.CHANGE_LIST (nolock) AS CL
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CL.CLST_ID = CAD.CLST_ID
LEFT JOIN GAM.ASSET_TRANSFER_LIST (nolock) AS AT ON AT.ASTL_CLST_ID = CL.CLST_ID
JOIN GAM.[ACTION] (nolock) AS ACTION ON ACTION.CLSA_ID = CAD.CLSA_ID
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASDCURRENT ON ASDCURRENT.ASD_STD_ID = CAD.ASD_STD_ID
AND ASDCURRENT.ASD_CLST_STAT_ID = 5
JOIN GAM.ASSET (nolock) AS ASSET ON ASSET.ASST_ID = ASDCURRENT.ASD_ASST_ID
JOIN GAM.MANUFACTURER (nolock) AS MANF ON MANF.MANF_ID = ASDCURRENT.ASD_MANF_ID
JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS INDCURRENT ON INDCURRENT.INSM_ID = ASDCURRENT.ASD_INSMAP_ID
JOIN GAM.ASSET_DETAIL (nolock) AS AD ON AD.ASD_STD_ID = ASDCURRENT.ASD_STD_ID
JOIN GAM.[OPTION] (nolock) AS OTPN ON OTPN.OPTN_ID = AD.AST_OPTION_ID
JOIN GAM.ASSET_DEFINITION (nolock) AS ADEF ON ADEF.ASTDFN_OPTN_ID = OTPN.OPTN_ID
AND ASDCURRENT.ASD_ASST_ID=ASTDFN_ASST_ID
WHERE ASDCURRENT.ASD_CLST_STAT_ID = 5 
AND AD.AST_OPTION_ID NOT IN ( 277 )
AND CL.CLST_ID = @P_CLST_ID
            UNION ALL
SELECT ASDCURRENT.ASD_NUMBER, ASDCURRENT.ASD_LOCATION, 
ASDCURRENT.ASD_SERIAL_NUM, MANF.MANF_LONG_NAME,
ASDCURRENT.ASD_AM_UID,  CL.CLST_EXECTUED_DATE AS CREATED_TS,
CAD.CREATED_TS AS CL_CREATED_TS, INDCURRENT.INSM_NAME AS DEST_SITE,
OTPN.OPTN_CODE,OPTN_NAME, OTPN.OPTN_DESCRIPTION, TCV.TYCV_OPTN_ID,
TCV.TYCV_OPTN_VALUE AS CURRENT_VALUE, ASSET.ASST_NAME AS ASSET_TYPE,
ASDCURRENT.ASD_ASST_ID AS ASSET_TYPE_ID,  ADEF.ASTDFN_OPTN_ORDER AS OPTION_ORDER,
CAD.CLSA_ID AS ACTION_ID,  ACTION.CLSA_CODE AS ACTION_CODE,
ASDCURRENT.IS_DELETED AS AST_IS_DELETED, TCV.TYCV_ID, ASDCURRENT.ASD_STD_ID,
CAD.CLST_OLD_DATA_ID AS OLD_ASD_STD_ID, CLST_DET_ID AS CLST_ASD_ID,
CL.CLST_NAME AS CHANGELIST_NAME,  CL.CLST_ID AS CHANGELIST_ID, 
CL.CLST_EXECTUED_DATE AS EXECUTED_DATETIME,
1 AS IS_TYPE_CODE_VALUE,OPTN_CUSTOM,  ASTL_DATA_SOURCE
FROM GAM.CHANGE_LIST (nolock) AS CL 
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CL.CLST_ID = CAD.CLST_ID
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASDCURRENT ON ASDCURRENT.ASD_STD_ID = CAD.ASD_STD_ID
LEFT JOIN GAM.ASSET_TRANSFER_LIST (nolock) AS AT ON AT.ASTL_CLST_ID = CL.CLST_ID
JOIN GAM.[ACTION] (nolock) AS ACTION ON ACTION.CLSA_ID = CAD.CLSA_ID
JOIN GAM.ASSET (nolock) AS ASSET ON ASSET.ASST_ID = ASDCURRENT.ASD_ASST_ID
JOIN GAM.MANUFACTURER (nolock) AS MANF ON MANF.MANF_ID = ASDCURRENT.ASD_MANF_ID
JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS INDCURRENT ON INDCURRENT.INSM_ID = ASDCURRENT.ASD_INSMAP_ID
JOIN GAM.TYPE_CODE_VALUES (nolock) AS TCV ON TCV.TYCV_TYCOD_ID = ASDCURRENT.ASD_TCOD_ID
JOIN GAM.[OPTION] (nolock) AS OTPN ON OTPN.OPTN_ID = TCV.TYCV_OPTN_ID
JOIN GAM.ASSET_DEFINITION (nolock) AS ADEF ON ADEF.ASTDFN_OPTN_ID = OTPN.OPTN_ID
AND ASDCURRENT.ASD_ASST_ID = ASTDFN_ASST_ID
WHERE 1 = 1 AND ASDCURRENT.ASD_CLST_STAT_ID = 5
AND CL.CLST_ID = @P_CLST_ID
) AS CUR_DATA

LEFT JOIN (SELECT ASDOLD.ASD_AM_UID AS OLD_ASD_AM_UID,
 ASDOLD.ASD_STD_ID AS OLD_ASD_STD_ID,
 ADOLD.AST_DET_ID AS OLD_AST_DET_ID,
 OLDCURRENT.INSM_NAME AS SOURCE_SITE, ADOLD.AST_OPTION_ID AS AST_OPTION_ID,
ASDOLD.ASD_NUMBER AS OLD_ASD_NUMBER,
ASDOLD.ASD_LOCATION AS OLD_ASD_LOCATION,
ASDOLD.ASD_SERIAL_NUM AS OLD_SERIAL_NUM,
ADOLD.AST_OPTN_VALUE AS OLD_VALUE
FROM GAM.CHANGE_LIST (nolock) AS CL 
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CL.CLST_ID = CAD.CLST_ID 
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASDOLD ON ASDOLD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID
--FROM GAM.ASSET_STANDARD_DETAILS (nolock) AS ASDOLD
JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS OLDCURRENT ON OLDCURRENT.INSM_ID = ASDOLD.ASD_INSMAP_ID
JOIN GAM.ASSET_DETAIL (nolock) AS ADOLD ON ADOLD.ASD_STD_ID = ASDOLD.ASD_STD_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MANF_ID = ASDOLD.ASD_MANF_ID
JOIN GAM.ASSET (nolock) AS ASSET ON ASSET.ASST_ID = ASDOLD.ASD_ASST_ID
WHERE ASDOLD.ASD_CLST_STAT_ID = 5 
AND CL.CLST_ID = @P_CLST_ID
 --AND ASDOLD.ASD_AM_UID = @P_AM_UID
UNION ALL
SELECT ASDOLD.ASD_AM_UID AS OLD_ASD_AM_UID, ASDOLD.ASD_STD_ID AS OLD_ASD_STD_ID, 
TCV.TYCV_ID AS OLD_AST_DET_ID, OLDCURRENT.INSM_NAME AS SOURCE_SITE,
TCV.TYCV_OPTN_ID AS AST_OPTION_ID,ASDOLD.ASD_NUMBER AS OLD_ASD_NUMBER,
ASDOLD.ASD_LOCATION AS OLD_ASD_LOCATION, ASDOLD.ASD_SERIAL_NUM AS OLD_SERIAL_NUM,
TCV.TYCV_OPTN_VALUE AS OLD_VALUE
FROM GAM.CHANGE_LIST (nolock) AS CL 
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CL.CLST_ID = CAD.CLST_ID 
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASDOLD ON ASDOLD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID
JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS OLDCURRENT ON OLDCURRENT.INSM_ID = ASDOLD.ASD_INSMAP_ID
JOIN GAM.TYPE_CODE_VALUES (nolock) AS TCV ON TCV.TYCV_TYCOD_ID = ASDOLD.ASD_TCOD_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MANF_ID = ASDOLD.ASD_MANF_ID
JOIN GAM.ASSET (nolock) AS ASSET ON ASSET.ASST_ID = ASDOLD.ASD_ASST_ID
WHERE ASDOLD.ASD_CLST_STAT_ID = 5
AND CL.CLST_ID = @P_CLST_ID
 --and ASDOLD.ASD_AM_UID = @P_AM_UID
) AS OLD_DATA ON CUR_DATA.OLD_ASD_STD_ID = OLD_DATA.OLD_ASD_STD_ID
     AND CUR_DATA.AST_OPTION_ID = OLD_DATA.AST_OPTION_ID))AS COMBINE
LEFT JOIN (SELECT
  CL.CLST_NAME,
  ASD.ASD_AM_UID AS AST_UNQU_ID,
  ASD.ASD_NUMBER AS ASSET_NUMBER,
  COUNT(*) AS REC_COUNT
FROM GAM.CHANGE_LIST (nolock) AS CL
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CAD.CLST_ID = CL.CLST_ID
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD ON ASD.ASD_STD_ID = CAD.ASD_STD_ID
JOIN GAM.ASSET_DETAIL (nolock) AS AD ON AD.ASD_STD_ID = ASD.ASD_STD_ID
LEFT JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD_OLD ON ASD_OLD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID
LEFT JOIN GAM.ASSET_DETAIL (nolock) AS AD_OLD ON AD_OLD.ASD_STD_ID = ASD_OLD.ASD_STD_ID
  AND AD.AST_OPTION_ID = AD_OLD.AST_OPTION_ID
WHERE 1 = 1 AND AD.AST_OPTION_ID NOT IN ( 277 )
AND CL.CLST_ID = @P_CLST_ID
GROUP BY cl.CLST_NAME, asd.ASD_AM_UID, asd.ASD_NUMBER) AS ch_Summary
  ON ch_Summary.CLST_NAME = changelist_name
  AND ch_Summary.ast_unqu_id = ASD_AM_UID
WHERE FINAL_DISPLAY = 1
--AND COMPARED_FLAG = 1 
AND (CASE WHEN REC_COUNT >= 1 AND COMPARED_FLAG = 1 THEN 1  WHEN ISNULL(REC_COUNT, 0) = 0 AND COMPARED_FLAG = 0 THEN 1 ELSE 0 END ) = 1  
ORDER BY ASD_AM_UID, EXECUTED_DATETIME, OPTION_ORDER

GO



--PROGRESSIVE

IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE')
DROP PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE
GO

CREATE PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE (@P_CLST_ID BIGINT, @P_CH_INDEX BIGINT)
AS
DECLARE @P_GH_PROG_ID BIGINT
--DECLARE @P_CH_INDEX BIGINT
--DECLARE @P_CLST_ID BIGINT
--SET @P_CLST_ID = 34

SELECT @P_GH_PROG_ID = COUNT(GH_PROG_ID) FROM MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE

INSERT INTO MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE
SELECT 
ROW_NUMBER()OVER(order by CL.CLST_ID ) + @P_GH_PROG_ID as GH_PROG_ID,
--CAST(
--format(@P_CH_INDEX, '000000') +
----CAST(@P_AM_UID as nvarchar) + 
--format(ROW_NUMBER()OVER(order by CL.CLST_ID ), '0000000000') as bigint) AS Id,
CL.CLST_ID, CL.CLST_NAME AS Changelist_Name,
cad.CLST_DET_ID, ASD.ASD_AM_UID, 
ACT.CLSA_CODE AS [ACTION],

p_old.PRGP_ID as PoolId_Old,
p_curr.PRGP_ID as PoolId_Current,

p_old.PRGP_NAME as PoolName_Old,
p_curr.PRGP_NAME as PoolName_Current,
CL.CLST_UNIQUE_ID, CL.CLST_INSMAP_ID,
CLST_EXECTUED_DATE

FROM GAM.CHANGE_LIST (nolock) AS CL 
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CL.CLST_ID = CAD.CLST_ID AND CL.CLST_ASSET_TYPE = 1
LEFT JOIN GAM.[ACTION] (nolock) AS ACT ON ACT.CLSA_ID = CAD.CLSA_ID
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD ON ASD.ASD_STD_ID = CAD.ASD_STD_ID
-- CURRENT
LEFT JOIN (SELECT ASD_STD_ID, p.PRGP_ID, p.PRGP_NAME FROM PROGRESSIVE.SLOT (nolock) AS PRGSLT
JOIN [PROGRESSIVE].[SLOT_POOL_MAPPING] (nolock) AS PMAP ON PMAP.[SLOT_ID] = PRGSLT.SLOT_ID
JOIN [PROGRESSIVE].[POOL] (nolock) as p on p.PRGP_ID = PMAP.PRGP_ID ) as p_curr on p_curr.ASD_STD_ID = CAD.ASD_STD_ID
-- OLD
LEFT JOIN (SELECT ASD_STD_ID, p.PRGP_ID, p.PRGP_NAME FROM PROGRESSIVE.SLOT (nolock) AS PRGSLT
JOIN [PROGRESSIVE].[SLOT_POOL_MAPPING] (nolock) AS PMAP ON PMAP.[SLOT_ID] = PRGSLT.SLOT_ID
JOIN [PROGRESSIVE].[POOL] (nolock) as p on p.PRGP_ID = PMAP.PRGP_ID ) as p_old on p_old.ASD_STD_ID = CLST_OLD_DATA_ID
WHERE 1 = 1 
AND ASD.ASD_CLST_STAT_ID = 5
 AND CL.CLST_ID = @P_CLST_ID
AND (p_curr.PRGP_NAME IS NOT NULL OR p_old.PRGP_NAME IS NOT NULL )
--ORDER BY CL.CLST_EXECTUED_DATE
GO



IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_CHK_ASSET_SLOT_OPTIONS_VALUE')
DROP PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_OPTIONS_VALUE
GO

CREATE PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_OPTIONS_VALUE (
@P_ASD_ID BIGINT, 
@P_SITE_NUM INT, 
@P_SITE_TYPE INT
)
AS 
 --209911629000004161, 1, 2
--declare @P_ASD_ID bigint;
--declare @P_SITE_NUM bigint;
--declare @P_SITE_TYPE int;

--set @P_ASD_ID = 209900001000002486
--set @P_SITE_NUM = 1
--set @P_SITE_TYPE = 2

DECLARE @TMP NVARCHAR(MAX)
SET @TMP = '{ "'

SELECT @TMP = @TMP + OPTN_CODE +'":"'+Option_Value+ '", "'
FROM ( SELECT OPTN.OPTN_ID, CASE WHEN OPTN.OPTN_CODE = 'ASSET.MASTER.MANUFACTURER' THEN 'MANUFACTURER' ELSE OPTN.OPTN_CODE END as OPTN_CODE,
CASE WHEN OPTN.OPTN_CODE in ('ASSET.GMU.CRC.AUTH', 'ASSET.CASLESS.DISAB', 'OPTION.CODE.ENROLMENT.STATUS')
 THEN 
	(CASE	WHEN AST_OPTN_VALUE = 'FLAG.NO' then 'N'
		WHEN AST_OPTN_VALUE = 'FLAG.F' then 'F'
		WHEN AST_OPTN_VALUE = 'FLAG.YES' then 'Y'
		WHEN AST_OPTN_VALUE = '' then 'N' END)
    WHEN OPTN.OPTN_CODE = ('BILL.VALIDATOR.CAPACITY') THEN 
		(CASE	WHEN AST_OPTN_VALUE = '' then '100'
			WHEN AST_OPTN_VALUE IS NULL then '100'
			ELSE AST_OPTN_VALUE END)
 ELSE
	(CASE WHEN AST_OPTN_VALUE = 'FLAG.NO' then 'No'
      WHEN AST_OPTN_VALUE = 'FLAG.BAL' then 'Balance'
      WHEN AST_OPTN_VALUE = 'FLAG.YES' then 'Yes'
      WHEN AST_OPTN_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.NORMAL' then 'Normal'
      WHEN AST_OPTN_VALUE = 'VALIDATION.SYSTEM' then 'System'
      WHEN AST_OPTN_VALUE = 'ETHERNET' then 'Ethernet'
      WHEN AST_OPTN_VALUE = 'PROTOCOL.TYPE.SAS' then 'SAS'
      WHEN AST_OPTN_VALUE = 'ASSET.CONFIG.STATUS.OFFLINE' then 'Offline'
      WHEN AST_OPTN_VALUE = 'ASSET.CONFIG.STATUS.ONLINE' then 'Online'
      WHEN AST_OPTN_VALUE = 'CONTROLLER.TYPE.THIRDPARTY' then 'Third Party'
      WHEN AST_OPTN_VALUE = 'ASSET.TYPE.EGM' THEN 'EGM'
      WHEN AST_OPTN_VALUE = 'PROTOCOL.TYPE.QCOMM' THEN 'QCOMM'
      WHEN AST_OPTN_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.WITH.CCCE' THEN 'With CCCE'
      WHEN AST_OPTN_VALUE = 'KIOSK.TYPE.K' THEN 'K'
      WHEN AST_OPTN_VALUE = 'VALIDATION.ENHANCED' THEN 'Enhanced'
      WHEN AST_OPTN_VALUE = 'SM.SERVER.DOWN' THEN 'Server Down'
      WHEN AST_OPTN_VALUE = 'METER.TYPE.BCD' THEN 'BCD'
      WHEN AST_OPTN_VALUE = '-------------Select-------------' THEN ''
      ELSE ISNULL(cast(AST_OPTN_VALUE as nvarchar), '') END)  END as Option_Value
 FROM GAM.ASSET_DETAIL (nolock) AS AD
JOIN GAM.[OPTION] (nolock) AS OPTN ON OPTN. [OPTN_ID] = AD.AST_OPTION_ID
WHERE ASD_STD_ID = @P_ASD_ID -- 209900182000000001 -- @P_ASD_ID

UNION ALL

SELECT OPTN.OPTN_ID, CASE WHEN OPTN.OPTN_CODE = 'ASSET.MASTER.MANUFACTURER' THEN 'MANUFACTURER' ELSE OPTN.OPTN_CODE END as OPTN_CODE,
CASE WHEN OPTN.OPTN_CODE in ('ASSET.GMU.CRC.AUTH', 'ASSET.CASLESS.DISAB', 'OPTION.CODE.ENROLMENT.STATUS') 
THEN 
	(CASE	WHEN TCV.TYCV_OPTN_VALUE = 'FLAG.NO' then 'N'
		WHEN TCV.TYCV_OPTN_VALUE = 'FLAG.F' then 'F'
		WHEN TCV.TYCV_OPTN_VALUE = 'FLAG.YES' then 'Y'
		WHEN TCV.TYCV_OPTN_VALUE = '' then 'N' END)
    WHEN OPTN.OPTN_CODE = ('BILL.VALIDATOR.CAPACITY') THEN 
		(CASE	WHEN TCV.TYCV_OPTN_VALUE = '' then '100'
			WHEN TCV.TYCV_OPTN_VALUE IS NULL then '100'
			ELSE TCV.TYCV_OPTN_VALUE END)
 ELSE
	(CASE WHEN TCV.TYCV_OPTN_VALUE = 'FLAG.NO' then 'No'
      WHEN TCV.TYCV_OPTN_VALUE = 'FLAG.BAL' then 'Balance'
      WHEN TCV.TYCV_OPTN_VALUE = 'FLAG.YES' then 'Yes'
      WHEN TCV.TYCV_OPTN_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.NORMAL' then 'Normal'
      WHEN TCV.TYCV_OPTN_VALUE = 'VALIDATION.SYSTEM' then 'System'
      WHEN TCV.TYCV_OPTN_VALUE = 'ETHERNET' then 'Ethernet'
      WHEN TCV.TYCV_OPTN_VALUE = 'PROTOCOL.TYPE.SAS' then 'SAS'
      WHEN TCV.TYCV_OPTN_VALUE = 'ASSET.CONFIG.STATUS.OFFLINE' then 'Offline'
      WHEN TCV.TYCV_OPTN_VALUE = 'ASSET.CONFIG.STATUS.ONLINE' then 'Online'
      WHEN TCV.TYCV_OPTN_VALUE = 'CONTROLLER.TYPE.THIRDPARTY' then 'Third Party'
      WHEN TCV.TYCV_OPTN_VALUE = 'ASSET.TYPE.EGM' THEN 'EGM'
      WHEN TCV.TYCV_OPTN_VALUE = 'PROTOCOL.TYPE.QCOMM' THEN 'QCOMM'
      WHEN TCV.TYCV_OPTN_VALUE = 'ASSET.CASH.CLUB.ENAB.ENUM.WITH.CCCE' THEN 'With CCCE'
      WHEN TCV.TYCV_OPTN_VALUE = 'KIOSK.TYPE.K' THEN 'K'
      WHEN TCV.TYCV_OPTN_VALUE = 'VALIDATION.ENHANCED' THEN 'Enhanced'
      WHEN TCV.TYCV_OPTN_VALUE = 'SM.SERVER.DOWN' THEN 'Server Down'
      WHEN TCV.TYCV_OPTN_VALUE = 'METER.TYPE.BCD' THEN 'BCD'
      WHEN TCV.TYCV_OPTN_VALUE = '-------------Select-------------' THEN ''
      ELSE ISNULL(cast(TCV.TYCV_OPTN_VALUE as nvarchar), '') END)  END as Option_Value
FROM GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD
join [GAM].[TYPE_CODE_MASTER] (nolock) as tcm on tcm.tycod_id = [ASD_TCOD_ID]
JOIN GAM.TYPE_CODE_VALUES  AS TCV ON TCV.TYCV_TYCOD_ID = TYCOD_ID
join gam.[OPTION] (nolock) as optn on optn.[OPTN_ID] = TYCV_OPTN_ID
WHERE ASD_STD_ID = @P_ASD_ID ) as ovrAll
order by OPTN_ID

SET @tmp = SUBSTRING(@tmp, 0, LEN(@tmp)-2) + '}'
--print @tmp
IF NOT EXISTS (SELECT 1 FROM MIGRATION.GAM_CHK_ASSET_SLOT_OPTIONS_VALUE WHERE P_ASD_ID = @P_ASD_ID)
BEGIN
	INSERT INTO MIGRATION.GAM_CHK_ASSET_SLOT_OPTIONS_VALUE VALUES (@P_ASD_ID, @P_SITE_NUM, @P_SITE_TYPE , @TMP)
END
GO


--Unique ID wise
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_CHK_GAM_ASSET_SLOT_OPTIONS_AM_UID')
DROP PROCEDURE MIGRATION.P_CHK_GAM_ASSET_SLOT_OPTIONS_AM_UID
GO


CREATE PROCEDURE MIGRATION.P_CHK_GAM_ASSET_SLOT_OPTIONS_AM_UID (@P_CLST_ID BIGINT)
AS
--DECLARE @P_CLST_ID BIGINT;
DECLARE @P_ASD_STD_ID BIGINT;
DECLARE @P_OLD_ASD_STD_ID BIGINT;
DECLARE @V_COUNT BIGINT;
DECLARE @P_SITE_NUM INT;
DECLARE @P_SITE_TYPE INT;
--SET @P_CLST_ID = 201

IF OBJECT_ID('tempdb..#TMP_CHK_UID_SLOT_ASD_ID_LIST') IS NOT NULL
DROP TABLE #TMP_CHK_UID_SLOT_ASD_ID_LIST;

CREATE TABLE #TMP_CHK_UID_SLOT_ASD_ID_LIST (ASD_STD_ID BIGINT, OLD_ASD_STD_ID BIGINT, SITE_NUMBER INT, SITE_TYPE INT)

INSERT INTO #TMP_CHK_UID_SLOT_ASD_ID_LIST
SELECT DISTINCT CURRENT_ID, CASE WHEN SOURCE_SITE <> DEST_SITE THEN PRE_ID ELSE NULL END AS PRE_ID,
SITENUMBER, SITE_TYPE_ID FROM MIGRATION.GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY 
JOIN GAM.[SITE] AS ST ON ST.SITE_NUMBER = SITENUMBER
WHERE CLST_ID = @P_CLST_ID

/*
SELECT ASD.ASD_STD_ID, SITE_NUMBER, SITE_TYPE_ID FROM GAM.ASSET_STANDARD_DETAILS AS ASD
JOIN GAM.INSTALLED_SYSTEM_MAP AS ISM ON ISM.INSM_ID = ASD.ASD_INSMAP_ID
JOIN GAM.SITE AS ST ON ST.SITE_ID = ISM.INSM_SITE_ID
where ST.SITE_NUMBER = @P_SITE_NUMBER
AND ASD_ASST_ID = 1 AND ASD_CLST_STAT_ID = 5
*/

SELECT @V_COUNT = COUNT(*) FROM #TMP_CHK_UID_SLOT_ASD_ID_LIST
--PRINT @V_COUNT
--SELECT @P_ASD_STD_ID = MIN(ASD_STD_ID) FROM #TMP_SLOT_ASD_ID_LIST
SELECT TOP 1 @P_ASD_STD_ID = (ASD_STD_ID),
@P_OLD_ASD_STD_ID = OLD_ASD_STD_ID,
@P_SITE_NUM = SITE_NUMBER,
@P_SITE_TYPE = SITE_TYPE
FROM #TMP_CHK_UID_SLOT_ASD_ID_LIST

WHILE @V_COUNT > 0
BEGIN
	DELETE FROM #TMP_CHK_UID_SLOT_ASD_ID_LIST WHERE ASD_STD_ID = @P_ASD_STD_ID;
	EXEC MIGRATION.P_CHK_ASSET_SLOT_OPTIONS_VALUE @P_ASD_STD_ID, @P_SITE_NUM, @P_SITE_TYPE
	--PRINT  @P_ASD_STD_ID
	/*IF (@P_OLD_ASD_STD_ID IS NOT NULL)
	BEGIN
		--PRINT  @P_OLD_ASD_STD_ID
		EXEC MIGRATION.P_CHK_ASSET_SLOT_OPTIONS_VALUE @P_OLD_ASD_STD_ID, @P_SITE_NUM, @P_SITE_TYPE
	END*/
	--PRINT  @P_ASD_STD_ID
	SELECT TOP 1 @P_ASD_STD_ID = (ASD_STD_ID),
	@P_OLD_ASD_STD_ID = OLD_ASD_STD_ID,
	@P_SITE_NUM = SITE_NUMBER,
	@P_SITE_TYPE = SITE_TYPE
	FROM #TMP_CHK_UID_SLOT_ASD_ID_LIST

	SELECT @V_COUNT = COUNT(*) FROM #TMP_CHK_UID_SLOT_ASD_ID_LIST
END

GO


IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_CHK_ASSET_SLOT_HISTORY_GAMES_MAPPING')
DROP PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_HISTORY_GAMES_MAPPING
GO

CREATE PROCEDURE MIGRATION.P_CHK_ASSET_SLOT_HISTORY_GAMES_MAPPING (@P_CLST_ID BIGINT, @P_CH_INDEX BIGINT)
AS
DECLARE @P_GAME_Idx BIGINT
--DECLARE @P_CH_INDEX BIGINT
--DECLARE @P_CLST_ID BIGINT
--SET @P_CLST_ID = 34
SELECT @P_GAME_Idx = COUNT(Idx) FROM MIGRATION.GAM_CHK_HISTORY_SLOT_GAMES_MAPPING

INSERT INTO MIGRATION.GAM_CHK_HISTORY_SLOT_GAMES_MAPPING
SELECT 
--CAST( ( format(CL_RW_ID, '000000') +
--format(Gmap_Id_Seq , '0000000000') ) as bigint) AS Idx,
(row_number() over (order by Game_Id)) + @P_GAME_Idx as idx, 
Gmap_Id_Seq, 
GM_ASD_STD_ID, Game_Id, ASD_AM_UID, gmOptionName, Code, Id, GmOptionValue, Comp_Id, Game_AssetId
FROM ( SELECT ROW_NUMBER() over (partition by CAD.CLST_ID, CAD.clst_det_id, asd_am_uid order by CAD.CLST_ID, CAD.clst_det_id, gdm_aststd_or_tycd_id, GM.Game_id, Id)  as Gmap_Id_Seq,
GDM_ASTSTD_OR_TYCD_ID as GM_ASD_STD_ID,
gm.Game_Id, ASD_AM_UID, gmOptionName, Code, Id, GmOptionValue, Comp_Id, H_Id as Game_AssetId, CL_RW_ID

FROM GAM.GAME_DETAILS_MAPPING (nolock) AS GMAP
JOIN MIGRATION.GAM_GAME_COMBO_HISTORY (nolock) as h_g on h_g.GAME_ID = GMAP.GDM_GAME_ID
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD ON ASD.ASD_STD_ID = GDM_ASTSTD_OR_TYCD_ID
JOIN GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD ON CAD.ASD_STD_ID = ASD.ASD_STD_ID 
join MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST (nolock) as hc on hc.clst_id = CAD.CLST_ID
JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS ISM ON ISM.INSM_ID = ASD.ASD_INSMAP_ID
JOIN GAM.[SITE] (nolock) AS SRC_ST ON SRC_ST.SITE_ID = ISM.INSM_SITE_ID
JOIN MIGRATION.GAM_HISTORY_GAMES (nolock) AS GM ON  GM.GAME_ID = GMAP.GDM_GAME_ID
WHERE 1=1  AND CAD.CLST_ID = @P_CLST_ID 
) as avv
GO



IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'P_ASSET_CHANGELIST_HISTORY_POPULATION')
DROP PROCEDURE MIGRATION.P_ASSET_CHANGELIST_HISTORY_POPULATION
GO

CREATE PROCEDURE MIGRATION.P_ASSET_CHANGELIST_HISTORY_POPULATION
AS
DECLARE @p_ch_index BIGINT;
DECLARE @p_ch_clst_id BIGINT;
DECLARE @p_ch_trck_count BIGINT;

IF OBJECT_ID('tempdb..#tmp_GAM_CH_ASSET_HISTORY_CHANGELIST') IS NOT NULL
DROP TABLE #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST;

select top 10000 * into #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST
from MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST where Is_History_Completed = 0 

SELECT @p_ch_trck_count = count(1) from #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST --where Is_History_Completed = 0
SELECT @p_ch_index = min(CL_RW_ID) from #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST --where Is_History_Completed = 0
SELECT @p_ch_clst_id = CLST_ID from #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST where CL_RW_ID = @p_ch_index

print @p_ch_trck_count
print @p_ch_index
print @p_ch_clst_id

while (@p_ch_trck_count>0)
begin
	UPDATE #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST
	SET [CL_HISTORY_START_DATE] = GETDATE()
	WHERE CL_RW_ID = @p_ch_index
	
	print @p_ch_trck_count
	print @p_ch_index
	print @p_ch_clst_id
	----------
	EXEC MIGRATION.P_CHL_ASSET_SLOT_HISTORY_SUMMARY @p_ch_clst_id, @p_ch_index
	EXEC MIGRATION.P_CHK_ASSET_SLOT_HISTORY_OPTIONS @p_ch_clst_id, @p_ch_index
	EXEC MIGRATION.P_CHK_ASSET_SLOT_HISTORY_PROGRESSIVE @p_ch_clst_id, @p_ch_index
	EXEC MIGRATION.P_CHK_GAM_ASSET_SLOT_OPTIONS_AM_UID @p_ch_clst_id
	EXEC MIGRATION.P_CHK_ASSET_SLOT_HISTORY_GAMES_MAPPING @p_ch_clst_id, @p_ch_index
	----------
	UPDATE #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST
	SET [CL_HISTORY_END_DATE] = GETDATE(), Is_History_Completed = 1
	WHERE CL_RW_ID = @p_ch_index

	update m
			set m.CL_HISTORY_START_DATE = tm.CL_HISTORY_START_DATE,
			m.CL_HISTORY_END_DATE = tm.CL_HISTORY_END_DATE,
			m.Is_History_Completed = tm.Is_History_Completed
		from MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST as m
		join #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST as tm  on m.CLST_ID = tm.CLST_ID
		and m.CL_RW_ID = tm.CL_RW_ID
	where tm.CL_RW_ID = @p_ch_index

	SELECT @p_ch_trck_count = count(1) FROM #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST WHERE Is_History_Completed = 0
	SELECT @p_ch_index = min(CL_RW_ID) FROM #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST WHERE Is_History_Completed = 0
	SELECT @p_ch_clst_id = CLST_ID FROM #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST WHERE CL_RW_ID = @p_ch_index
	
end

--update m
--set m.CL_HISTORY_START_DATE = tm.CL_HISTORY_START_DATE,
--m.CL_HISTORY_END_DATE = tm.CL_HISTORY_END_DATE,
--m.Is_History_Completed = tm.Is_History_Completed
--from MIGRATION.GAM_CH_ASSET_HISTORY_CHANGELIST as m
--join #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST as tm  on m.CLST_ID = tm.CLST_ID
--and m.CL_RW_ID = tm.CL_RW_ID
IF OBJECT_ID('tempdb..#tmp_GAM_CH_ASSET_HISTORY_CHANGELIST') IS NOT NULL
DROP TABLE #tmp_GAM_CH_ASSET_HISTORY_CHANGELIST;

GO


--Index for legacy DB

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[GAM].[ASSET_STANDARD_DETAILS]') 
	AND name = N'IDX_GAM_ASSET_STANDARD_DETAILS_ASD_AM_UID')
DROP INDEX IDX_GAM_ASSET_STANDARD_DETAILS_ASD_AM_UID ON [GAM].[ASSET_STANDARD_DETAILS]
GO

CREATE NONCLUSTERED INDEX IDX_GAM_ASSET_STANDARD_DETAILS_ASD_AM_UID
ON [GAM].[ASSET_STANDARD_DETAILS] ([ASD_AM_UID])
INCLUDE ([ASD_ASST_ID],[ASD_INSMAP_ID],[IS_DELETED])
GO



-- GAME DETAILS - COMPONENT DATA
--drop table MIGRATION.GAME_DETAIL_COMPONENTS
go

SELECT * 
INTO MIGRATION.GAME_DETAIL_COMPONENTS
FROM ( SELECT GM.GAME_ID, 1 as Seq,
22011 as InlineAssets_Components_ComponentId,
'Denom' as InlineAssets_Components_ComponentName,
gdm.DENM_AMOUNT as InlineAssets_Components_ComponentValue,
'0_'+cast(gdm.Components_Id as nvarchar)+'_1' as InlineAssets_Components_ComponentKey,
'Inline260DENOMINATION' as InlineAssets_Components_ComponentInstanceId,
'DENOMINATION' as InlineAssets_Components_ComponentCode,
 row_number() over (order by GAME_ID) Row_Num,
 6 as Htry_Indx,
 GM.IS_DELETED as Game_Deleted
--, *
FROM GAM.GAME_DETAILS (nolock) AS GM
JOIN GAM.DENOMINATION (nolock) AS D ON D.DENM_ID = GAME_DENOM
JOIN MIGRATION.GAM_DENOMINATION (nolock) as gdm on gdm.DENM_ID = D.DENM_ID

Union All

-- theme type
SELECT GM.GAME_ID, 2 as Seq,
22057 as ComponentId,
'Theme Type' as ComponentName,
tt.TTYP_LONG_NAME as ComponentValue,
'0_'+ CAST(GTD.ThemeType_Id as nvarchar) +'_22057' as ComponentKey,
'Inline260THEMETYPE' as ComponentInstanceId,
'THEME.TYPE' as ComponentCode,
 row_number() over (order by GAME_ID) Row_Num,
 7 as Htry_Indx,
 GM.IS_DELETED as Game_Deleted
FROM GAM.GAME_DETAILS (nolock) AS GM
JOIN GAM.THEME (nolock) AS TH ON TH.THEM_ID = GM.GAME_THEM_ID
LEFT JOIN MIGRATION.GAM_THEME (nolock) AS GTH ON GTH.TME_LEGCY_ID = TH.THEM_ID
JOIN GAM.THEME_TYPE (nolock) AS TT ON TT.TTYP_ID = TH.TTYP_ID
JOIN GAM.THEME_CATEGORY (nolock) AS TC ON TC.TCAT_ID = TH.THEME_CAT_ID
JOIN GAM.THEME_GROUP (nolock) AS TG ON TG.TGRP_ID = TC.TCAT_TGRP_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MNF.MANF_ID = TH.MANF_ID
LEFT JOIN MIGRATION.GAM_MANUFACTURER (nolock) AS GMF ON GMF.MNF_LEGCY_ID = MNF.MANF_ID 
LEFT JOIN MIGRATION.GAM_THEME_DETAILS (nolock) AS GTD ON gtd.TTYP_ID = TT.TTYP_ID AND GTD.THEM_ID = TH.THEM_ID
--WHERE GM.IS_DELETED = 0

union all
-- theme group
SELECT GM.GAME_ID, 3 as Seq,
22058 as ComponentId,
'Theme Group' as ComponentName,
TG.TGRP_LONG_NAME as ComponentValue,
'0_'+ CAST(GTD.ThemeGroup_Id as nvarchar) +'_22058' as ComponentKey,
'Inline260THEMEGROUP' as ComponentInstanceId,
'THEME.GROUP' as ComponentCode,
 row_number() over (order by GAME_ID) Row_Num,
 8 as Htry_Indx,
 GM.IS_DELETED as Game_Deleted
FROM GAM.GAME_DETAILS (nolock) AS GM
JOIN GAM.THEME (nolock) AS TH ON TH.THEM_ID = GM.GAME_THEM_ID
LEFT JOIN MIGRATION.GAM_THEME (nolock) AS GTH ON GTH.TME_LEGCY_ID = TH.THEM_ID
JOIN GAM.THEME_CATEGORY (nolock) AS TC ON TC.TCAT_ID = TH.THEME_CAT_ID
JOIN GAM.THEME_GROUP (nolock) AS TG ON TG.TGRP_ID = TC.TCAT_TGRP_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MNF.MANF_ID = TH.MANF_ID
LEFT JOIN MIGRATION.GAM_MANUFACTURER  (nolock) AS GMF ON GMF.MNF_LEGCY_ID = MNF.MANF_ID 
LEFT JOIN MIGRATION.GAM_THEME_DETAILS (nolock) AS GTD ON gtd.TGRP_ID = TG.TGRP_ID AND GTD.THEM_ID = TH.THEM_ID
--where GM.IS_DELETED = 0

union all
-- theme category
SELECT GM.GAME_ID, 4 as Seq,
22059 as ComponentId,
'Theme Category' as ComponentName,
TC.TCAT_LONG_NAME as ComponentValue,
'0_'+ CAST(GTD.ThemeCategory_Id as nvarchar) +'_22059' as ComponentKey,
'Inline260THEMECATEGORY' as ComponentInstanceId,
'THEME.CATEGORY' as ComponentCode,
 row_number() over (order by GAME_ID) Row_Num,
 9 as Htry_Indx,
 GM.IS_DELETED as Game_Deleted
FROM GAM.GAME_DETAILS (nolock) AS GM
JOIN GAM.THEME (nolock) AS TH ON TH.THEM_ID = GM.GAME_THEM_ID
LEFT JOIN MIGRATION.GAM_THEME (nolock) AS GTH ON GTH.TME_LEGCY_ID = TH.THEM_ID
JOIN GAM.THEME_CATEGORY (nolock) AS TC ON TC.TCAT_ID = TH.THEME_CAT_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MNF.MANF_ID = TH.MANF_ID
LEFT JOIN MIGRATION.GAM_MANUFACTURER (nolock) AS GMF ON GMF.MNF_LEGCY_ID = MNF.MANF_ID 
LEFT JOIN MIGRATION.GAM_THEME_DETAILS (nolock) AS GTD ON gtd.TCAT_ID = TC.TCAT_ID AND GTD.THEM_ID = TH.THEM_ID
--where GM.IS_DELETED = 0

union all
--Manufacturer
SELECT GM.GAME_ID, 5 as Seq,
22002 as ComponentId,
'Manufacturer' as ComponentName,
MNF.MANF_LONG_NAME as ComponentValue,
'0_'+ CAST(GTD.Manfacture_Id as nvarchar) +'_22002' as ComponentKey,
'Inline260MANUFACTURER' as ComponentInstanceId,
'MANUFACTURER' as ComponentCode,
 row_number() over (order by GAME_ID) Row_Num,
 10 as Htry_Indx,
 GM.IS_DELETED as Game_Deleted
FROM GAM.GAME_DETAILS (nolock) AS GM
JOIN GAM.THEME (nolock) AS TH ON TH.THEM_ID = GM.GAME_THEM_ID
LEFT JOIN MIGRATION.GAM_THEME (nolock) AS GTH ON GTH.TME_LEGCY_ID = TH.THEM_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MNF.MANF_ID = TH.MANF_ID
LEFT JOIN MIGRATION.GAM_MANUFACTURER (nolock) AS GMF ON GMF.MNF_LEGCY_ID = MNF.MANF_ID 
LEFT JOIN MIGRATION.GAM_THEME_DETAILS (nolock) AS GTD ON gtd.MANF_ID = MNF.MANF_ID AND GTD.THEM_ID = TH.THEM_ID

--WHERE GM.IS_DELETED = 0

UNION ALL
--Theme
SELECT GM.GAME_ID, 6 as Seq,
22060 as ComponentId,
'Theme Attributes' as ComponentName,
TH.THEM_NAME as ComponentValue,
'0_'+ CAST(Theme_Id as nvarchar) +'_22060' as ComponentKey,
'Inline260THEME' as ComponentInstanceId,
'THEME' as ComponentCode,
 row_number() over (order by GAME_ID) Row_Num,
 11 as Htry_Indx,
 GM.IS_DELETED as Game_Deleted
FROM GAM.GAME_DETAILS (nolock) AS GM
JOIN GAM.THEME (nolock) AS TH ON TH.THEM_ID = GM.GAME_THEM_ID
LEFT JOIN MIGRATION.GAM_THEME (nolock) AS GTH ON GTH.TME_LEGCY_ID = TH.THEM_ID
JOIN GAM.MANUFACTURER (nolock) AS MNF ON MNF.MANF_ID = TH.MANF_ID
LEFT JOIN MIGRATION.GAM_MANUFACTURER (nolock) AS GMF ON GMF.MNF_LEGCY_ID = MNF.MANF_ID 
LEFT JOIN MIGRATION.GAM_THEME_DETAILS (nolock) AS GTD ON gtd.THEM_ID = TH.THEM_ID AND GTD.THEM_ID = TH.THEM_ID
--where GM.IS_DELETED = 0
) as gam_Comp 


--select * from MIGRATION.GAME_DETAIL_COMPONENTS

--DROP TABLE MIGRATION.GAM_GAMES_DETAILS
GO
--19:08, 5071062
SELECT ROW_NUMBER()OVER (partition by [GDM_ASTSTD_OR_TYCD_ID] Order by [GDM_ASTSTD_OR_TYCD_ID], mainT.game_id, mainT.seq) as Ast_Gme_Seq,
* 
INTO MIGRATION.GAM_GAMES_DETAILS
FROM (SELECT AST_GAME_IDX as InlineAssets_Id,
260 as AssetId_AssetTypeDefinitionId,
AST_GAME_IDX as AssetId_Id,
ROW_NUMBER() OVER (partition by GMP.[GDM_ASTSTD_OR_TYCD_ID], gam_Comp.game_id Order by GMP.[GDM_ASTSTD_OR_TYCD_ID], gam_Comp.game_id, gam_Comp.seq) as Rw_Nm,
SITE_NEW_ID as Site_SiteId,
SITE_SHORT_NAME as Site_SiteName,
st.SITE_NUMBER as Site_SiteNumber,
PROP_NEW_ID as OrganizationId,
PROP_LONG_NAME as OrganizationName,
TYCOD_NAME as TypeCodeName,
TYCOD_NUMBER as TypeCodeNumber,
GDM_ASTSTD_OR_TYCD_ID,
gam_Comp.*,
GOPTN.*,
GSD.* FROM MIGRATION.GAME_DETAIL_COMPONENTS (nolock) as gam_Comp 
LEFT JOIN (SELECT ROW_NUMBER()OVER ( ORDER BY [GDM_ASTSTD_OR_TYCD_ID],GDM_GAME_ID) AS AST_GAME_IDX, *
 FROM GAM.GAME_DETAILS_MAPPING (nolock) WHERE IS_DELETED = 0) AS GMP ON GMP.[GDM_GAME_ID]= GAM_COMP.GAME_ID 
LEFT JOIN GAM.ASSET_STANDARD_DETAILS (nolock) as asd on asd.asd_std_id = [GDM_ASTSTD_OR_TYCD_ID]
LEFT JOIN MIGRATION.GAM_ASSET_STANDARD_DETAILS (nolock) AS GSD ON GSD.ASD_STD_LEGACY_ID = [GDM_ASTSTD_OR_TYCD_ID] 
LEFT JOIN GAM.MANUFACTURER (nolock) AS MF ON MF.MANF_ID = ASD_MANF_ID
LEFT JOIN GAM.INSTALLED_SYSTEM_MAP (nolock) AS MAP ON MAP.INSM_ID = ASD.ASD_INSMAP_ID
LEFT JOIN GAM.[SITE] (nolock) AS ST ON ST.SITE_ID = MAP.INSM_SITE_ID
LEFT JOIN MIGRATION.GAM_SITE (nolock) AS GST ON GST.[SITE_LEGCY_ID] = ST.SITE_ID
LEFT JOIN GAM.PROPERTY (nolock) AS pt ON pt.PROP_ID = ST.SITE_PROP_ID
LEFT JOIN [MIGRATION].[GAM_PROPERTY] (nolock) as gpt on gpt.[PROP_LEGCY_ID] = pt.PROP_ID
LEFT JOIN GAM.TYPE_CODE_MASTER (nolock) AS TCM ON TCM.TYCOD_ID = ASD_TCOD_ID
LEFT JOIN MIGRATION.VIEW_GAME_COMBO_OPTIONS (nolock) AS GOPTN 
ON GOPTN.GO_GAME_ID = GAM_COMP.GAME_ID AND GOPTN.IDINDEX = GAM_COMP.SEQ 
--order by GMP.[GDM_ASTSTD_OR_TYCD_ID], gam_Comp.game_id, gam_Comp.seq
WHERE 1=1
--AND ASD.IS_DELETED = 0 AND GMP.IS_DELETED = 0 
AND ASD.ASD_CLST_STAT_ID = 5
--AND gam_Comp.Game_Deleted = 0
AND MANF_LONG_NAME NOT IN ('POS') ) as mainT
--where ASD_STD_NEW_ID = 14507
ORDER BY mainT.[GDM_ASTSTD_OR_TYCD_ID], mainT.game_id, mainT.Rw_Nm
GO


--
IF EXISTS (SELECT * FROM [SYS].[INDEXES] WHERE [NAME] = 'GAM_GAMES_DETAILS_INDX')
BEGIN
DROP INDEX [GAM_GAMES_DETAILS_INDX] ON [MIGRATION].[GAM_GAMES_DETAILS]
END


CREATE NONCLUSTERED INDEX [GAM_GAMES_DETAILS_INDX]
ON [MIGRATION].[GAM_GAMES_DETAILS] ([GAME_ID],[Seq])
INCLUDE ([InlineAssets_Id],[AssetId_AssetTypeDefinitionId],[AssetId_Id],[InlineAssets_Components_ComponentId],[InlineAssets_Components_ComponentName],[InlineAssets_Components_ComponentValue],[InlineAssets_Components_ComponentKey],[InlineAssets_Components_ComponentInstanceId],[InlineAssets_Components_ComponentCode],[Options_Code],[IdIndex],[Options_Value])

GO

--------------------------
-- Games
--------------------------

SELECT Game_Id, GmOptionName,
CASE WHEN GmOptionName ='Denom' THEN 'DENOMINATION' 
     WHEN GmOptionName ='Theme Type' THEN 'THEME.TYPE' 
     WHEN GmOptionName ='Theme Group' THEN 'THEME.GROUP' 
     WHEN GmOptionName ='Theme Category' THEN 'THEME.CATEGORY' 
     WHEN GmOptionName ='Manufacturer' THEN 'MANUFACTURER'
     WHEN GmOptionName ='Theme Attributes' THEN 'THEME' 
     ELSE GmOptionName end as Code,
     
     Seq as Id, GmOptionValue,

     CASE WHEN GmOptionName ='Denom' THEN '22011' 
     WHEN GmOptionName ='Theme Type' THEN '22057' 
     WHEN GmOptionName ='Theme Group' THEN '22058' 
     WHEN GmOptionName ='Theme Category' THEN '22059' 
     WHEN GmOptionName ='Manufacturer' THEN '22002'
     WHEN GmOptionName ='Theme Attributes' THEN '22060' 
     WHEN GmOptionName ='Hold Percent' THEN '0'
     WHEN GmOptionName ='Max Credit Bet' THEN '0'
     WHEN GmOptionName ='Pay Lines' THEN '0'
     WHEN GmOptionName ='Reels' THEN '0'
     WHEN GmOptionName ='Paytable' THEN '0' end as Comp_Id
INTO MIGRATION.GAM_HISTORY_GAMES
FROM (
SELECT DISTINCT Game_id, InlineAssets_Components_ComponentName as GmOptionName,  Seq, InlineAssets_Components_ComponentValue as GmOptionValue  
FROM [MIGRATION].[GAM_GAMES_DETAILS](nolock)
--where game_id = 1099000005473
UNION ALL
SELECT DISTINCT go_game_id, options_code, IdIndex+6, Options_Value from [MIGRATION].[GAM_GAMES_DETAILS](nolock)
--where go_game_id = 1099000005473
) AS TGM
WHERE GAME_ID IS NOT NULL
-- and game_id = 1099000005473
ORDER BY GAME_ID, SEQ

GO




IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[MIGRATION].[GAM_HISTORY_GAMES]') AND name = N'IDX_GAME_ID_SEQ_GAMES_HISTORY')
DROP INDEX IDX_GAME_ID_SEQ_GAMES_HISTORY ON [MIGRATION].[GAM_HISTORY_GAMES]
GO

CREATE NONCLUSTERED INDEX [IDX_GAME_ID_SEQ_GAMES_HISTORY] ON [MIGRATION].[GAM_HISTORY_GAMES]
(
	[Game_id] ASC,
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

GO


CREATE NONCLUSTERED INDEX [INDX_STD_DTL_MAP_UID]
    ON [GAM].[ASSET_STANDARD_DETAILS]([ASD_AM_UID] ASC)
    INCLUDE([ASD_ASST_ID], [ASD_INSMAP_ID]);
GO

CREATE NONCLUSTERED INDEX [INDX_STD_DTL_UID]
    ON [GAM].[ASSET_STANDARD_DETAILS]([ASD_AM_UID] ASC, [ASD_CLST_STAT_ID] ASC)
    INCLUDE([ASD_STD_ID]);
GO

CREATE NONCLUSTERED INDEX [INDX_TYP_CD_VALUES]
    ON [GAM].[TYPE_CODE_VALUES]([TYCV_TYCOD_ID] ASC, [TYCV_OPTN_ID] ASC)
    INCLUDE([TYCV_ID], [TYCV_OPTN_VALUE]);
GO


CREATE NONCLUSTERED INDEX GAM_ASSET_TRANSFER_LIST_ASTL_CLST_ID
ON [GAM].[ASSET_TRANSFER_LIST] ([ASTL_CLST_ID])

GO


--CREATE NONCLUSTERED INDEX IDX_GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY_CLST_ID
--ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY] ([CLST_ID])

--GO


CREATE NONCLUSTERED INDEX IDX_GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY_L2
ON [MIGRATION].[GAM_CHK_ASSET_SLOT_HISTORY_SUMMARY] ([CLST_ID],[SiteNumber])
INCLUDE ([Current_Id],[Pre_Id],[SOURCE_SITE],[DEST_SITE])
GO

CREATE NONCLUSTERED INDEX IDX_PROGRESSIVE_SLOT_ASD_STD_ID
ON [PROGRESSIVE].[SLOT] ([ASD_STD_ID])

GO

CREATE NONCLUSTERED INDEX IDX_COMMON_USER_ACTOR_ACTR_IS_DELETED
ON [COMMON].[USER_ACTOR] ([ACTR_IS_DELETED])
INCLUDE ([ACTR_LOGIN],[ACTR_USER_ID],[ACTR_LAST_NAME],[ACTR_MIDDLE_NAME],[ACTR_FIRST_NAME],[ACTR_ACTIVE_DIR_USER])
GO

CREATE NONCLUSTERED INDEX IDX_GAME_DETAILS_MAP_GDM_ASTSTD_OR_TYCD_ID
ON [GAM].[GAME_DETAILS_MAPPING] ([GDM_ASTSTD_OR_TYCD_ID])
INCLUDE ([GDM_GAME_ID])
GO

CREATE NONCLUSTERED INDEX IDX_GAM_CH_ASSET_HISTORY_CHANGELIST_CL_RW_ID
ON [MIGRATION].[GAM_CH_ASSET_HISTORY_CHANGELIST] ([CL_RW_ID])

GO

CREATE NONCLUSTERED INDEX IDX_GAM_CH_ASSET_HISTORY_CHANGELIST_CLST_ID
ON [MIGRATION].[GAM_CH_ASSET_HISTORY_CHANGELIST] ([CLST_ID])

GO
