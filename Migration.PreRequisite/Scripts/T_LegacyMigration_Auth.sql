
/*
	
	***************************************************
	*												  *
	*    PreRequisite Name - LegacyAuthDataTables     *
	*												  *
	***************************************************
   
   Purpose : To Populating New Ids for Active Auth records

*/

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'Migration')
EXEC ('CREATE SCHEMA MIGRATION;');
GO


 ------Drop Tables ----

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.COMMON_USER_FUNCTION_GROUP') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.COMMON_USER_FUNCTION_GROUP
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.COMMON_USER_ROLE') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.COMMON_USER_ROLE
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_PROPERTY') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_PROPERTY 
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_SITE') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_SITE 
END
GO


------------ DDL Create & Insert Data ---------------------

CREATE TABLE MIGRATION.COMMON_USER_FUNCTION_GROUP 
(
FUNCGRP_ID BIGINT,
FUNCGRP_NEW_ID BIGINT
)

-- insert record for migration

INSERT INTO MIGRATION.COMMON_USER_FUNCTION_GROUP (FUNCGRP_ID, FUNCGRP_NEW_ID)
SELECT FUNCGRP_ID, ROW_NUMBER()OVER(ORDER BY FUNCGRP_CREATED_TS) AS RW_NUM 
FROM [COMMON].[USER_FUNCTION_GROUP] (nolock) WHERE FUNCGRP_IS_DELETED = 0 ORDER BY FUNCGRP_CREATED_TS 

GO


CREATE TABLE MIGRATION.COMMON_USER_ROLE
(
ROLE_ID BIGINT,
ROLE_NEW_ID BIGINT
)
GO

-- insert record for migration

INSERT INTO MIGRATION.COMMON_USER_ROLE (ROLE_ID, ROLE_NEW_ID)
SELECT ROLE_ID, ROW_NUMBER()OVER(ORDER BY ROLE_CREATED_TS) AS RW_NUM FROM [COMMON].[USER_ROLE] (nolock) 
WHERE ROLE_IS_DELETED = 0 ORDER BY ROLE_CREATED_TS 
GO

CREATE TABLE MIGRATION.GAM_PROPERTY (
PROP_LEGCY_ID BIGINT,
PROP_NEW_ID BIGINT,
PROP_SHORT_NAME VARCHAR(128),
PROP_PARENT_CODE VARCHAR(5),
PROP_TYPE VARCHAR(32),
PROP_DEPTH_LEVEL INT
)
GO

--CREATE INDEX IDX_GAM_PRTY ON [MIGRATION].[GAM_PROPERTY] ([PROP_LEGCY_ID]);
--GO

--POPULATING PROPERTY TABLE

INSERT INTO MIGRATION.GAM_PROPERTY (PROP_LEGCY_ID, PROP_SHORT_NAME, PROP_NEW_ID)
SELECT PROP_ID, PROP_SHORT_NAME, ROW_NUMBER() OVER (ORDER BY CREATED_TS)  AS NEW_SEQ FROM GAM.PROPERTY (nolock) WHERE IS_DELETED = 0 AND  PROP_ID NOT IN (1)

GO

CREATE TABLE MIGRATION.GAM_SITE (
SITE_LEGCY_ID BIGINT,
SITE_NEW_ID BIGINT,
SITE_NUMBER BIGINT,
SITE_CODE VARCHAR(5),
SITE_LICENSEE VARCHAR(128),
SITE_LICENSE_NUM VARCHAR(16)
)

GO

INSERT INTO MIGRATION.GAM_SITE (SITE_LEGCY_ID, SITE_NUMBER, SITE_NEW_ID)
SELECT SITE_ID, SITE_NUMBER, SITE_NUMBER FROM GAM.[SITE] (nolock) WHERE IS_DELETED = 0 

GO



IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.TMP_CURRENT_ASSET_UID') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.TMP_CURRENT_ASSET_UID 
END
GO


SELECT * INTO MIGRATION.TMP_CURRENT_ASSET_UID
 FROM ( SELECT ASD_STD_ID, ROW_NUMBER() OVER (ORDER BY CREATED_TS) + cpig_counter  AS UID, cpig_counter
FROM GAM.ASSET_STANDARD_DETAILS (nolock) cross join (select cpig_counter from COMMON.CUSTOM_PRIMARY_ID_GENERATOR (nolock)
 WHERE CPIG_SLOT_NUMBER = '9999_AMUID') as mxId
WHERE IS_DELETED = 0 AND ASD_CLST_STAT_ID = 5 AND ASD_AM_UID IS NULL ) AS T
GO

--SELECT * FROM MIGRATION.TMP_CURRENT_ASSET_UID
DECLARE @C_UID_UPDATE CURSOR;
DECLARE @P_CURR_ASSET BIGINT;
DECLARE @P_CURR_ASSET_VERSION BIGINT;


SET @C_UID_UPDATE = CURSOR FAST_FORWARD READ_ONLY FOR
SELECT ASD_STD_ID, UID FROM MIGRATION.TMP_CURRENT_ASSET_UID

SET NOCOUNT OFF;
OPEN @C_UID_UPDATE
FETCH NEXT FROM @C_UID_UPDATE INTO @P_CURR_ASSET, @P_CURR_ASSET_VERSION

WHILE @@FETCH_STATUS = 0
BEGIN

;WITH CTE_ASSET_UPDATE 
AS ( 
SELECT DISTINCT @P_CURR_ASSET as CURR_ASSET, CAD.ASD_STD_ID AS ASSET_ID, 
CASE WHEN CAD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID THEN NULL ELSE CAD.CLST_OLD_DATA_ID  END AS ASSET_ID_OLD ,
CAD.CLST_DET_ID,
 1 AS VER
FROM GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD
WHERE CAD.ASD_STD_ID = (@P_CURR_ASSET)  
UNION ALL
SELECT @P_CURR_ASSET CURR_ASSET, CAD.ASD_STD_ID AS ASSET_ID, 
CASE WHEN CAD.ASD_STD_ID = CAD.CLST_OLD_DATA_ID THEN NULL ELSE CAD.CLST_OLD_DATA_ID  END AS ASSET_ID_OLD , 
CAD.CLST_DET_ID,
 VER+1
FROM GAM.CHANGELIST_ASSET_DETAIL (nolock) AS CAD
JOIN CTE_ASSET_UPDATE T2 ON CAD.ASD_STD_ID = T2.ASSET_ID_OLD
)

UPDATE ASD SET ASD.ASD_am_uid = @P_CURR_ASSET_VERSION
--SELECT *
 FROM CTE_ASSET_UPDATE 
JOIN GAM.ASSET_STANDARD_DETAILS (nolock) AS ASD  ON ASD.ASD_STD_ID = ASSET_ID
WHERE ASD_AM_UID IS NULL --AND ASD_CLST_STAT_ID <> 2
option (maxrecursion  1000)

print '------------------'
print @P_CURR_ASSET
print @P_CURR_ASSET_VERSION
print '------------------'
FETCH NEXT FROM @C_UID_UPDATE INTO @P_CURR_ASSET, @P_CURR_ASSET_VERSION

 END
 CLOSE @C_UID_UPDATE
 DEALLOCATE @C_UID_UPDATE;

 DECLARE @MAX_ID BIGINT;
 SELECT @MAX_ID = MAX(ASD_AM_UID) FROM GAM.ASSET_STANDARD_DETAILS (nolock)
 
 UPDATE COMMON.CUSTOM_PRIMARY_ID_GENERATOR 
 SET CPIG_COUNTER = @max_id
 WHERE CPIG_SLOT_NUMBER = '9999_AMUID'
 GO

DROP TABLE MIGRATION.TMP_CURRENT_ASSET_UID
GO
