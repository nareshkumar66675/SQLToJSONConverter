

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.COMMON_USER_FUNCTION_GROUP') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.COMMON_USER_FUNCTION_GROUP
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.COMMON_USER_ROLE') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.COMMON_USER_ROLE
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_PROPERTY') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_PROPERTY 
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_SITE') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_SITE 
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.GAM_ASSET_STANDARD_DETAILS') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.GAM_ASSET_STANDARD_DETAILS
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'MIGRATION.ASSET_TYPE_DEFN') AND type in (N'U'))
BEGIN
DROP Table MIGRATION.ASSET_TYPE_DEFN
END
GO

--IF EXISTS (SELECT * FROM sys.schemas WHERE name = N'Migration')
--DROP SCHEMA MIGRATION
--GO
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'Migration')
EXEC ('CREATE SCHEMA MIGRATION;');
GO

CREATE TABLE MIGRATION.COMMON_USER_FUNCTION_GROUP 
(
FUNCGRP_ID BIGINT,
FUNCGRP_NEW_ID BIGINT
)

-- insert record for migration

INSERT INTO MIGRATION.COMMON_USER_FUNCTION_GROUP (FUNCGRP_ID, FUNCGRP_NEW_ID)
SELECT FUNCGRP_ID, ROW_NUMBER()OVER(ORDER BY FUNCGRP_CREATED_TS) AS RW_NUM 
FROM [COMMON].[USER_FUNCTION_GROUP] WHERE FUNCGRP_IS_DELETED = 0 ORDER BY FUNCGRP_CREATED_TS 

GO


CREATE TABLE MIGRATION.COMMON_USER_ROLE
(
ROLE_ID BIGINT,
ROLE_NEW_ID BIGINT
)
GO

-- insert record for migration

INSERT INTO MIGRATION.COMMON_USER_ROLE (ROLE_ID, ROLE_NEW_ID)
SELECT ROLE_ID, ROW_NUMBER()OVER(ORDER BY ROLE_CREATED_TS) AS RW_NUM FROM [COMMON].[USER_ROLE] 
WHERE ROLE_IS_DELETED = 0 ORDER BY ROLE_CREATED_TS 


CREATE TABLE MIGRATION.GAM_PROPERTY (
PROP_LEGCY_ID BIGINT,
PROP_NEW_ID BIGINT,
PROP_SHORT_NAME VARCHAR(128),
PROP_PARENT_CODE VARCHAR(5),
PROP_TYPE VARCHAR(32),
PROP_DEPTH_LEVEL INT
)
GO

--POPULATING PROPERTY TABLE

INSERT INTO MIGRATION.GAM_PROPERTY (PROP_LEGCY_ID, PROP_SHORT_NAME, PROP_NEW_ID)
SELECT PROP_ID, PROP_SHORT_NAME, ROW_NUMBER() OVER (ORDER BY CREATED_TS)  AS NEW_SEQ FROM GAM.PROPERTY WHERE IS_DELETED = 0 AND  PROP_ID NOT IN (1)

/*
SELECT 'UPDATE MIGRATION.GAM_PROPERTY SET PROP_PARENT_CODE = '''
+ Prop_Short_Name + ''', PROP_TYPE = '''
+ ORG_TYPE_CODE  + ''', PROP_DEPTH_LEVEL = '
+ CAST(Depth_Level AS NVARCHAR) + ' WHERE PROP_SHORT_NAME = '''+Prop_Short_Name+''''
 as stat,  * FROM ( SELECT ORG.ORG_CODE as Prop_Short_Name,
ORG.[ORG_SHORT_NAME] as Prop_Long_Name,
ORG.[ORG_LONG_NAME] as Prop_Description,
p_org.ORG_CODE as Parent_Code,
case when ORG.ORG_PARENT_ID is null then 'True'
	 else 'False' end as IsRoot,
case when ORG.ORG_PARENT_ID is null then 1
	 when ORG.ORG_PARENT_ID = 1 then 2
	 when ORG.ORG_PARENT_ID > 1 then 3 end as Depth_Level,
ORGTYPE.[ORG_TYPE_CODE]
FROM [UM].[ORGANIZATION] AS ORG
LEFT JOIN [UM].[ORGANIZATION_TYPE] AS ORGTYPE ON ORGTYPE.ORG_TYPE_ID = ORG.ORG_TYPE_ID
left join [UM].[ORGANIZATION] AS p_org on p_org.ORG_ID = ORG.ORG_PARENT_ID
WHERE ORG.ORG_DELETED_TS IS NULL AND ORGTYPE.ORG_TYPE_ID <> 3  ) as AM_Property
*/

CREATE TABLE MIGRATION.GAM_SITE (
SITE_LEGCY_ID BIGINT,
SITE_NEW_ID BIGINT,
SITE_NUMBER BIGINT,
SITE_CODE VARCHAR(5),
SITE_LICENSEE VARCHAR(128),
SITE_LICENSE_NUM VARCHAR(16)
)

GO

INSERT INTO MIGRATION.GAM_SITE (SITE_LEGCY_ID, SITE_NUMBER, SITE_NEW_ID)
SELECT SITE_ID, SITE_NUMBER, SITE_NUMBER FROM GAM.[SITE] WHERE IS_DELETED = 0 

/*
SELECT 'UPDATE MIGRATION.GAM_SITE SET SITE_CODE = '''
+ ORG.ORG_CODE +''' , '
+' SITE_LICENSEE = ''' + CASE WHEN ORG_LICENSEE IS NULL THEN '' ELSE CAST(ORG_LICENSEE AS NVARCHAR) END +''' ,'
+' SITE_LICENSE_NUM = ''' + CASE WHEN ORG_LICENSE_NUM IS NULL THEN '' ELSE CAST(ORG_LICENSE_NUM AS NVARCHAR) END +''''
+ ' WHERE SITE_NUMBER = ' + CAST(ORG_NUMBER AS NVARCHAR)  as Stat ,
*
 FROM [UM].[ORGANIZATION] AS ORG
LEFT JOIN [UM].[ORGANIZATION_TYPE] AS ORGTYPE ON ORGTYPE.ORG_TYPE_ID = ORG.ORG_TYPE_ID
WHERE ORG.ORG_DELETED_TS IS NULL AND ORGTYPE.ORG_TYPE_ID = 3 
*/


CREATE TABLE MIGRATION.GAM_ASSET_STANDARD_DETAILS (
ASD_STD_LEGACY_ID BIGINT, 
ASD_STD_NEW_ID INT
)


--select * from #asset_id_generator
INSERT INTO MIGRATION.GAM_ASSET_STANDARD_DETAILS
SELECT ASD_STD_ID, ROW_NUMBER() OVER(ORDER BY ASD_AM_UID) AS RW_NUM  FROM GAM.ASSET_STANDARD_DETAILS AS ASD 
WHERE IS_DELETED = 0 AND ASD_CLST_STAT_ID = 5 ORDER BY ASD.ASD_AM_UID 

GO

CREATE TABLE MIGRATION.ASSET_TYPE_DEFN
(
ID INT,
ASST_ID INT,
ASSET_NAME NVARCHAR(128),
ASSET_CODE NVARCHAR(128),
ASSET_DISPLAY_NAME NVARCHAR(128),
OPTION_ID INT,
OPTION_NAME NVARCHAR(128),
OPTION_CODE NVARCHAR(128)
)

